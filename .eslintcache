[{"E:\\MDP Project\\mdp-front-end\\src\\index.js":"1","E:\\MDP Project\\mdp-front-end\\src\\App.js":"2","E:\\MDP Project\\mdp-front-end\\src\\reportWebVitals.js":"3","D:\\mdp\\mdp-front-end\\src\\index.js":"4","D:\\mdp\\mdp-front-end\\src\\App.js":"5","D:\\mdp\\mdp-front-end\\src\\reportWebVitals.js":"6","D:\\mdp\\mdp-front-end\\src\\FileUpload.js":"7","D:\\mdp\\mdp-front-end\\src\\FormLayoutDemo.js":"8","D:\\mdp\\mdp-front-end\\src\\DataTable.js":"9","D:\\mdp\\mdp-front-end\\src\\tempSave.js":"10","D:\\mdp\\mdp-front-end\\src\\AppWrapper.js":"11","D:\\mdp\\mdp-front-end\\src\\ParticularMeter.js":"12","D:\\mdp\\mdp-front-end\\src\\FolderStructure.js":"13","D:\\mdp\\mdp-front-end\\src\\Tree\\Tree.js":"14","D:\\mdp\\mdp-front-end\\src\\Tree\\state\\index.js":"15","D:\\mdp\\mdp-front-end\\src\\Tree\\state\\TreeContext.js":"16","D:\\mdp\\mdp-front-end\\src\\Tree\\state\\reducer.js":"17","D:\\mdp\\mdp-front-end\\src\\Tree\\state\\constants.js":"18","D:\\mdp\\mdp-front-end\\src\\Tree\\File\\TreeFile.js":"19","D:\\mdp\\mdp-front-end\\src\\Tree\\Folder\\TreeFolder.js":"20","D:\\mdp\\mdp-front-end\\src\\Tree\\Folder\\TreeFolder.style.js":"21","D:\\mdp\\mdp-front-end\\src\\Tree\\Tree.style.js":"22","D:\\mdp\\mdp-front-end\\src\\utils.js":"23","D:\\mdp\\mdp-front-end\\src\\Tree\\File\\TreeFile.style.js":"24","D:\\mdp\\mdp-front-end\\src\\Tree\\FileIcons.js":"25","D:\\mdp\\mdp-front-end\\src\\Tree\\TreePlaceholderInput.js":"26","D:\\mdp\\mdp-front-end\\src\\SidebarActions.js":"27","D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterMerge.js":"28","D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterValidate.js":"29","D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterExtract.js":"30","D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterMWH.js":"31","D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterDateFilter.js":"32","D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterFinalOutput.js":"33","D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterFict.js":"34","D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterAnalyse.js":"35"},{"size":500,"mtime":499162500000,"results":"36","hashOfConfig":"37"},{"size":528,"mtime":499162500000,"results":"38","hashOfConfig":"37"},{"size":362,"mtime":499162500000,"results":"39","hashOfConfig":"37"},{"size":493,"mtime":1614057337949,"results":"40","hashOfConfig":"41"},{"size":2334,"mtime":1608281598617,"results":"42","hashOfConfig":"41"},{"size":375,"mtime":1608266237869,"results":"43","hashOfConfig":"41"},{"size":1152,"mtime":1612327939393,"results":"44","hashOfConfig":"41"},{"size":3289,"mtime":1614057337733,"results":"45","hashOfConfig":"41"},{"size":18665,"mtime":1614057337733,"results":"46","hashOfConfig":"41"},{"size":572,"mtime":1614577654089,"results":"47","hashOfConfig":"41"},{"size":813,"mtime":1614057337718,"results":"48","hashOfConfig":"41"},{"size":10709,"mtime":1614674973046,"results":"49","hashOfConfig":"41"},{"size":5866,"mtime":1614623207180,"results":"50","hashOfConfig":"41"},{"size":1915,"mtime":1614057337933,"results":"51","hashOfConfig":"41"},{"size":95,"mtime":1613041252122,"results":"52","hashOfConfig":"41"},{"size":290,"mtime":1613041252120,"results":"53","hashOfConfig":"41"},{"size":1332,"mtime":1613042245192,"results":"54","hashOfConfig":"41"},{"size":254,"mtime":1613041252121,"results":"55","hashOfConfig":"41"},{"size":2128,"mtime":1614057337918,"results":"56","hashOfConfig":"41"},{"size":3621,"mtime":1614057337933,"results":"57","hashOfConfig":"41"},{"size":225,"mtime":1613041252115,"results":"58","hashOfConfig":"41"},{"size":1423,"mtime":1614057337949,"results":"59","hashOfConfig":"41"},{"size":1937,"mtime":1613041252168,"results":"60","hashOfConfig":"41"},{"size":216,"mtime":1613041252111,"results":"61","hashOfConfig":"41"},{"size":257,"mtime":1613041252112,"results":"62","hashOfConfig":"41"},{"size":2206,"mtime":1613042490210,"results":"63","hashOfConfig":"41"},{"size":2803,"mtime":1614057337902,"results":"64","hashOfConfig":"41"},{"size":5115,"mtime":1614057337887,"results":"65","hashOfConfig":"41"},{"size":5119,"mtime":1614057337902,"results":"66","hashOfConfig":"41"},{"size":2126,"mtime":1614577654031,"results":"67","hashOfConfig":"41"},{"size":4424,"mtime":1614664400977,"results":"68","hashOfConfig":"41"},{"size":5454,"mtime":1614057337856,"results":"69","hashOfConfig":"41"},{"size":932,"mtime":1614057337856,"results":"70","hashOfConfig":"41"},{"size":4300,"mtime":1614666933731,"results":"71","hashOfConfig":"41"},{"size":927,"mtime":1614057337840,"results":"72","hashOfConfig":"41"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s04f4x",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},"ylgylm",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"82"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"82"},"E:\\MDP Project\\mdp-front-end\\src\\index.js",[],"E:\\MDP Project\\mdp-front-end\\src\\App.js",[],"E:\\MDP Project\\mdp-front-end\\src\\reportWebVitals.js",[],"D:\\mdp\\mdp-front-end\\src\\index.js",["162","163","164","165","166","167","168","169","170","171","172"],"import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport FileUploadDemo from \"./FileUpload\";\r\nimport FormLayoutDemo from \"./FormLayoutDemo\";\r\nimport AppWrapper from \"./AppWrapper\";\r\nimport DataTable from \"./DataTable\";\r\nimport TempSave from \"./tempSave\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport SidebarActions from \"./SidebarActions\";\r\n\r\nReactDOM.render(<AppWrapper />, document.getElementById(\"root\"));\r\n",["173","174"],"D:\\mdp\\mdp-front-end\\src\\App.js",[],"D:\\mdp\\mdp-front-end\\src\\reportWebVitals.js",[],["175","176"],"D:\\mdp\\mdp-front-end\\src\\FileUpload.js",["177"],"import 'primeicons/primeicons.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\nimport 'primereact/resources/primereact.css';\r\nimport 'primeflex/primeflex.css';\r\nimport './cssFiles/fileUpload.css';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport React, { useRef } from 'react';\r\nimport { Toast } from 'primereact/toast';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nexport default function FileUploadDemo() {\r\n    const toast = useRef(null);\r\n\r\n    const onUpload = () => {\r\n        toast.current.show({severity: 'info', summary: 'Success', detail: 'File Uploaded'});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast}></Toast>\r\n\r\n            <div className=\"card\">\r\n                <h5>Advanced</h5>\r\n                <FileUpload name=\"demo[]\" url=\"./upload.php\" onUpload={onUpload} multiple accept=\"image/*\" maxFileSize={1000000}\r\n                    emptyTemplate={<p className=\"p-m-0\">Drag and drop files to here to upload.</p>} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                \r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<FileUploadDemo />, rootElement);\r\n","D:\\mdp\\mdp-front-end\\src\\FormLayoutDemo.js",["178","179","180","181","182","183"],"import \"primeicons/primeicons.css\";\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\nimport \"primereact/resources/primereact.css\";\r\nimport \"primeflex/primeflex.css\";\r\nimport \"./cssFiles/FormLayoutDemo.css\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport React, { useState, useRef } from \"react\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\nimport { Checkbox } from \"primereact/checkbox\";\r\nimport { RadioButton } from \"primereact/radiobutton\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { InputTextarea } from \"primereact/inputtextarea\";\r\nimport { Toast } from \"primereact/toast\";\r\nimport { FileUpload } from \"primereact/fileupload\";\r\n\r\nexport default function FormLayoutDemo() {\r\n  const [year, setYear] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n\r\n  const [meterZippedFile, setMeterZippedFile] = useState();\r\n\r\n  const newBook = () => {\r\n    console.log(\"works\");\r\n    console.log(meterZippedFile);\r\n    console.log(meterZippedFile.name);\r\n    const uploadData = new FormData();\r\n    uploadData.append(\"year\", year);\r\n    uploadData.append(\"month\", month);\r\n    uploadData.append(\"meterZippedFile\", meterZippedFile, meterZippedFile.name);\r\n    // var csrftoken = getCookie(\"csrftoken\");\r\n    console.log(uploadData);\r\n    // fetch(\"http://127.0.0.1:8000/fmmdp/addNewMeterFile/\", {\r\n    //   method: \"POST\",\r\n    //   body: uploadData,\r\n    // })\r\n    //   .then((res) => console.log(res))\r\n    //   .catch((error) => console.log(error));\r\n  };\r\n\r\n  const toast = useRef(null);\r\n\r\n  return (\r\n    <div>\r\n      <Toast ref={toast}></Toast>\r\n\r\n      <h5>Add meter cumulative data</h5>\r\n      <div className=\"p-formgroup-inline\">\r\n        <div className=\"p-field\">\r\n          <label className=\"p-sr-only\">Year</label>\r\n          <InputText\r\n            type=\"text\"\r\n            value={year}\r\n            placeholder=\"Year\"\r\n            onChange={(evt) => setYear(evt.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"p-field\">\r\n          <label className=\"p-sr-only\">Month</label>\r\n          <InputText\r\n            type=\"text\"\r\n            value={month}\r\n            placeholder=\"Month\"\r\n            onChange={(evt) => setMonth(evt.target.value)}\r\n          />\r\n        </div>\r\n        {/* <div className=\"p-field\">\r\n          <FileUpload\r\n            // name=\"demo[]\"\r\n            // url=\"./upload.php\"\r\n            // onUpload={onUpload}\r\n            // multiple\r\n            // accept=\"image/*\"\r\n            // maxFileSize={1000000}\r\n            emptyTemplate={\r\n              <p className=\"p-m-0\">Drag and drop files to here to upload.</p>\r\n            }\r\n            type=\"file\"\r\n            onChange={(evt) => setMeterZippedFile(evt.target.files[0])}\r\n          />\r\n        </div> */}\r\n        <div className=\"p-field\">\r\n          <label>\r\n            Meter Zip File\r\n            <input\r\n              type=\"file\"\r\n              onChange={(evt) => setMeterZippedFile(evt.target.files[0])}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <Button type=\"button\" label=\"Submit\" onClick={() => newBook()} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<FormLayoutDemo />, rootElement);\r\n","D:\\mdp\\mdp-front-end\\src\\DataTable.js",["184","185","186","187","188","189","190","191","192","193","194","195","196","197","198"],"import \"primeicons/primeicons.css\";\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\nimport \"primereact/resources/primereact.css\";\r\nimport \"primeflex/primeflex.css\";\r\nimport \"./cssFiles/DataTableDemo.css\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Tag } from \"primereact/tag\";\r\nimport axios from \"axios\";\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport ProductService from \"./ProductService\";\r\nimport { Toast } from \"primereact/toast\";\r\nimport { Button } from \"primereact/button\";\r\nimport { FileUpload } from \"primereact/fileupload\";\r\nimport { Rating } from \"primereact/rating\";\r\nimport { Toolbar } from \"primereact/toolbar\";\r\nimport { InputTextarea } from \"primereact/inputtextarea\";\r\nimport { RadioButton } from \"primereact/radiobutton\";\r\nimport { InputNumber } from \"primereact/inputnumber\";\r\nimport { Dialog } from \"primereact/dialog\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// import \"./DataTableDemo.css\";\r\n\r\nexport default function DataTableCrudDemo() {\r\n  let emptyMeter = {\r\n    model: \"fifteenmmdp.allmeterfiles\",\r\n    pk: null,\r\n    fields: { year: \"\", month: \"\", zippedMeterFile: null },\r\n  };\r\n\r\n  // const [meterZippedFile, setMeterZippedFile] = useState();\r\n\r\n  //////////////////////////////////// my own ///////////////////////////////////\r\n\r\n  // const [year, setYear] = useState(\"\");\r\n  // const [month, setMonth] = useState(\"\");\r\n  const [meters, setMeters] = useState(null);\r\n  const [meter, setMeter] = useState(emptyMeter);\r\n  const [meterDialog, setMeterDialog] = useState(false);\r\n  const [selectedMeters, setSelectedMeters] = useState(null);\r\n  const [deleteMeterDialog, setDeleteMeterDialog] = useState(false);\r\n  const [deleteMetersDialog, setDeleteMetersDialog] = useState(false);\r\n\r\n  //////////////////////////////////////////////////////////////////////////////\r\n\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [globalFilter, setGlobalFilter] = useState(null);\r\n  const toast = useRef(null);\r\n  const dt = useRef(null);\r\n  const productService = new ProductService();\r\n  let history = useHistory();\r\n  useEffect(() => {\r\n    fetch(\"http://127.0.0.1:8000/fmmdp/getAllMeterData/\")\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        setMeters(result);\r\n        console.log(result);\r\n      });\r\n  }, []);\r\n\r\n  const months = [\r\n    { month: \"January\", value: \"January\" },\r\n    { month: \"February\", value: \"February\" },\r\n    { month: \"March\", value: \"March\" },\r\n    { month: \"April\", value: \"April\" },\r\n    { month: \"May\", value: \"May\" },\r\n  ];\r\n\r\n  const openNew = () => {\r\n    setMeter(emptyMeter);\r\n    setSubmitted(false);\r\n    setMeterDialog(true);\r\n  };\r\n\r\n  const hideDialog = () => {\r\n    setSubmitted(false);\r\n    setMeterDialog(false);\r\n  };\r\n\r\n  const hideDeleteMeterDialog = () => {\r\n    setDeleteMeterDialog(false);\r\n  };\r\n\r\n  const hideDeleteMetersDialog = () => {\r\n    setDeleteMetersDialog(false);\r\n  };\r\n  const processMeterData = (id) => {\r\n    axios\r\n      .post(\"http://127.0.0.1:8000/fmmdp/unzipMeterData/\" + id)\r\n      .then((response) => {\r\n        setMeter(emptyMeter);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const workWithMeterData = (rowData) => {\r\n    return (\r\n      <Button\r\n        label=\"Work with Meter Data\"\r\n        className=\"p-button-rounded p-button-secondary\"\r\n        onClick={() => history.push(\"/meterFile/\" + rowData.pk)}\r\n      />\r\n    );\r\n  };\r\n  const processUploadedMeterData = (rowData) => {\r\n    return (\r\n      <Button\r\n        label=\"Extract/Merge/Verify/DateFilter\"\r\n        className=\"p-button-rounded p-button-secondary\"\r\n        onClick={() => processMeterData(rowData.pk)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const downloadTemplate = (rowData) => {\r\n    return (\r\n      <>\r\n        <a\r\n          href={\r\n            \"http://127.0.0.1:8000/fmmdp/media/\" +\r\n            rowData.fields.zippedMeterFile\r\n          }\r\n          download={\r\n            \"http://127.0.0.1:8000/fmmdp/media/\" +\r\n            rowData.fields.zippedMeterFile\r\n          }\r\n        >\r\n          {rowData.fields.zippedMeterFile\r\n            ? rowData.fields.zippedMeterFile.split(\"/\").slice(-1).pop()\r\n            : null}\r\n        </a>\r\n        <br />\r\n        <br />\r\n        <TagDemo />\r\n      </>\r\n    );\r\n  };\r\n  // const newBook = () => {\r\n  //   console.log(\"works\");\r\n  //   const uploadData = new FormData();\r\n  //   uploadData.append(\"year\", meter.fields.year);\r\n  //   uploadData.append(\"month\", meter.fields.month);\r\n  //   uploadData.append(\r\n  //     \"meterZippedFile\",\r\n  //     meter.fields.zippedMeterFile,\r\n  //     meter.fields.zippedMeterFile.name\r\n  //   );\r\n  //   console.log(uploadData);\r\n\r\n  //   axios\r\n  //     .post(\"http://127.0.0.1:8000/fmmdp/addNewMeterFile/\", uploadData)\r\n  //     .then((response) => {\r\n  //       console.log(response);\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.log(error);\r\n  //     });\r\n  // };\r\n\r\n  const saveMeter = () => {\r\n    setSubmitted(true);\r\n\r\n    if (\r\n      meter.fields.year.trim() != \"\" &&\r\n      meter.fields.month.trim() != \"\" &&\r\n      meter.fields.zippedMeterFile\r\n    ) {\r\n      let _meters = [...meters]; // Fetching already existing meters. Because we will use it for both edit & creation\r\n      let _meter = { ...meter };\r\n      if (meter.pk) {\r\n        const uploadData = new FormData();\r\n        uploadData.append(\"year\", meter.fields.year);\r\n        uploadData.append(\"month\", meter.fields.month);\r\n        uploadData.append(\r\n          \"meterZippedFile\",\r\n          meter.fields.zippedMeterFile,\r\n          meter.fields.zippedMeterFile.name\r\n        );\r\n        console.log(uploadData);\r\n        axios\r\n          .post(\r\n            \"http://127.0.0.1:8000/fmmdp/editNewMeterFile/\" + meter.pk,\r\n            uploadData\r\n          )\r\n          .then((response) => {\r\n            const index = findIndexById(meter.pk);\r\n\r\n            _meters[index] = _meter;\r\n            toast.current.show({\r\n              severity: \"success\",\r\n              summary: \"Successful\",\r\n              detail: \"Meter data updated\",\r\n              life: 3000,\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      } else {\r\n        const uploadData = new FormData();\r\n        uploadData.append(\"year\", meter.fields.year);\r\n        uploadData.append(\"month\", meter.fields.month);\r\n        uploadData.append(\r\n          \"meterZippedFile\",\r\n          meter.fields.zippedMeterFile,\r\n          meter.fields.zippedMeterFile.name\r\n        );\r\n        console.log(uploadData);\r\n        axios\r\n          .post(\"http://127.0.0.1:8000/fmmdp/addNewMeterFile/\", uploadData)\r\n          .then((response) => {\r\n            console.log(response);\r\n            _meter.pk = response.data.id;\r\n            _meters.push(_meter);\r\n            toast.current.show({\r\n              severity: \"success\",\r\n              summary: \"Successful\",\r\n              detail: \"Meter data added\",\r\n              life: 3000,\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      }\r\n\r\n      setMeters(_meters);\r\n      setMeterDialog(false);\r\n      setMeter(emptyMeter);\r\n    }\r\n  };\r\n\r\n  const editMeter = (meter) => {\r\n    setMeter({ ...meter }); // meter object spread\r\n    setMeterDialog(true);\r\n  };\r\n\r\n  //   const editProduct = (product) => {\r\n  //     setProduct({ ...product }); // product object spread\r\n  //     setProductDialog(true);\r\n  //   };\r\n  const confirmDeleteMeter = (meter) => {\r\n    setMeter(meter);\r\n    setDeleteMeterDialog(true);\r\n  };\r\n\r\n  const deleteProduct = () => {\r\n    fetch(\"http://127.0.0.1:8000/fmmdp/deleteNewMeterFile/\" + meter.pk)\r\n      .then((res) => {\r\n        console.log(res);\r\n        let _meters = meters.filter((val) => val.pk !== meter.pk);\r\n        setMeters(_meters);\r\n        setDeleteMeterDialog(false);\r\n        setMeter(emptyMeter);\r\n        toast.current.show({\r\n          severity: \"success\",\r\n          summary: \"Successful\",\r\n          detail: \"Product Deleted\",\r\n          life: 3000,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast.current.show({\r\n          severity: \"danger\",\r\n          summary: \"Unsuccessful\",\r\n          detail: \"Some error occured\",\r\n          life: 3000,\r\n        });\r\n      });\r\n  };\r\n\r\n  const findIndexById = (id) => {\r\n    let index = -1;\r\n    for (let i = 0; i < meters.length; i++) {\r\n      if (meters[i].pk === id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return index;\r\n  };\r\n\r\n  const confirmDeleteSelected = () => {\r\n    setDeleteMetersDialog(true);\r\n  };\r\n\r\n  const deleteSelectedProducts = () => {\r\n    let _meters = meters.filter((val) => !selectedMeters.includes(val));\r\n    setMeters(_meters);\r\n    setDeleteMetersDialog(false);\r\n    setSelectedMeters(null);\r\n    toast.current.show({\r\n      severity: \"success\",\r\n      summary: \"Successful\",\r\n      detail: \"Products Deleted\",\r\n      life: 3000,\r\n    });\r\n  };\r\n\r\n  const onInputChange = (e, name) => {\r\n    const val = (e.target && e.target.value) || \"\";\r\n    let _meter = { ...meter };\r\n    _meter[\"fields\"][`${name}`] = val;\r\n\r\n    setMeter(_meter);\r\n  };\r\n\r\n  const onFileChange = (e, name) => {\r\n    console.log(\"fine\");\r\n    // const val = e.value || 0;\r\n    let _meter = { ...meter };\r\n    // _meter[`${name}`] = val;\r\n    _meter.fields.zippedMeterFile = e.target.files[0];\r\n\r\n    setMeter(_meter);\r\n  };\r\n  const leftToolbarTemplate = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <Button\r\n          label=\"New\"\r\n          icon=\"pi pi-plus\"\r\n          className=\"p-button-success p-mr-2\"\r\n          onClick={openNew}\r\n        />\r\n        {/* <Button\r\n          label=\"Delete\"\r\n          icon=\"pi pi-trash\"\r\n          className=\"p-button-danger\"\r\n          onClick={confirmDeleteSelected}\r\n          disabled={!selectedMeters || !selectedMeters.length}\r\n        /> */}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const TagDemo = () => {\r\n    return (\r\n      <div>\r\n        <div className=\"card\">\r\n          <Tag\r\n            className=\"p-mr-2\"\r\n            severity=\"success\"\r\n            value=\"Not processed yet\"\r\n          ></Tag>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const actionBodyTemplate = (rowData) => {\r\n    return (\r\n      <React.Fragment>\r\n        {/* <Button\r\n          icon=\"pi pi-pencil\"\r\n          className=\"p-button-rounded p-button-success p-mr-2\"\r\n          onClick={() => {\r\n            console.log(rowData);\r\n            editMeter(rowData);\r\n          }}\r\n        /> */}\r\n        <Button\r\n          icon=\"pi pi-trash\"\r\n          className=\"p-button-rounded p-button-warning\"\r\n          onClick={() => confirmDeleteMeter(rowData)}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const header = (\r\n    <div className=\"table-header\">\r\n      <h5 className=\"p-m-0\">Manage Meter Files</h5>\r\n      <span className=\"p-input-icon-left\">\r\n        <i className=\"pi pi-search\" />\r\n        <InputText\r\n          type=\"search\"\r\n          onInput={(e) => setGlobalFilter(e.target.value)}\r\n          placeholder=\"Search...\"\r\n        />\r\n      </span>\r\n    </div>\r\n  );\r\n  const meterDialogFooter = (\r\n    <React.Fragment>\r\n      <Button\r\n        label=\"Discard Changes\"\r\n        icon=\"pi pi-times\"\r\n        className=\"p-button-text\"\r\n        onClick={hideDialog}\r\n      />\r\n      <Button\r\n        label=\"Save Meter Data\"\r\n        icon=\"pi pi-check\"\r\n        className=\"p-button-text\"\r\n        onClick={() => saveMeter()}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n  const deleteMeterDialogFooter = (\r\n    <React.Fragment>\r\n      <Button\r\n        label=\"No\"\r\n        icon=\"pi pi-times\"\r\n        className=\"p-button-text\"\r\n        onClick={hideDeleteMeterDialog}\r\n      />\r\n      <Button\r\n        label=\"Yes\"\r\n        icon=\"pi pi-check\"\r\n        className=\"p-button-text\"\r\n        onClick={deleteProduct}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n  const deleteMetersDialogFooter = (\r\n    <React.Fragment>\r\n      <Button\r\n        label=\"No\"\r\n        icon=\"pi pi-times\"\r\n        className=\"p-button-text\"\r\n        onClick={hideDeleteMetersDialog}\r\n      />\r\n      <Button\r\n        label=\"Yes\"\r\n        icon=\"pi pi-check\"\r\n        className=\"p-button-text\"\r\n        onClick={deleteSelectedProducts}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <div className=\"datatable-crud-demo\">\r\n      <Toast ref={toast} />\r\n\r\n      <div className=\"card\">\r\n        <Toolbar\r\n          className=\"p-mb-4\"\r\n          left={leftToolbarTemplate}\r\n          //   right={rightToolbarTemplate}\r\n        ></Toolbar>\r\n\r\n        <DataTable\r\n          ref={dt}\r\n          value={meters}\r\n          selection={selectedMeters}\r\n          onSelectionChange={(e) => setSelectedMeters(e.value)}\r\n          dataKey=\"pk\"\r\n          paginator\r\n          rows={10}\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n          currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} Meter Data\"\r\n          globalFilter={globalFilter}\r\n          header={header}\r\n        >\r\n          {/* <Column\r\n            selectionMode=\"multiple\"\r\n            headerStyle={{ width: \"3rem\" }}\r\n          ></Column> */}\r\n          <Column field=\"fields.year\" header=\"Year\" sortable></Column>\r\n          <Column field=\"fields.month\" header=\"Month\" sortable></Column>\r\n          <Column body={downloadTemplate} header=\"All meter Zip file\"></Column>\r\n\r\n          {/* <Column\r\n            field=\"inventoryStatus\"\r\n            header=\"Status\"\r\n            body={TagDemo}\r\n            sortable\r\n          ></Column> */}\r\n\r\n          <Column\r\n            field=\"inventoryStatus\"\r\n            header=\"Process\"\r\n            body={workWithMeterData}\r\n            sortable\r\n          ></Column>\r\n          {/* <Column\r\n            field=\"inventoryStatus\"\r\n            header=\"Process\"\r\n            body={processUploadedMeterData}\r\n            sortable\r\n          ></Column> */}\r\n\r\n          <Column header=\"Delete Meter Data\" body={actionBodyTemplate}></Column>\r\n        </DataTable>\r\n      </div>\r\n\r\n      <Dialog\r\n        visible={meterDialog}\r\n        style={{ width: \"450px\" }}\r\n        header=\"Add Meter Data\"\r\n        modal\r\n        className=\"p-fluid\"\r\n        footer={meterDialogFooter}\r\n        onHide={hideDialog} // The cross button at right\r\n      >\r\n        <div className=\"p-field\">\r\n          <label htmlFor=\"year\" className=\"p-sr-only\">\r\n            Year\r\n          </label>\r\n          <InputText\r\n            id=\"year\"\r\n            type=\"text\"\r\n            placeholder=\"Year\"\r\n            defaultValue={meter.fields.year}\r\n            onChange={(e) => onInputChange(e, \"year\")}\r\n            required\r\n            // rows={5}\r\n            // cols={10}\r\n            // defaultValue={meter.fields.year}\r\n          />\r\n          {submitted && !meter.fields.year && (\r\n            <small className=\"p-error\">Year is required.</small>\r\n          )}\r\n        </div>\r\n        {/* ////////////////////////////////////////////// */}\r\n        {/* <div className=\"p-field\">\r\n          <label htmlFor=\"month\" className=\"p-sr-only\">\r\n            Month\r\n          </label>\r\n          <Dropdown\r\n            contentStyle={{ overflow: \"visible\" }}\r\n            id=\"month\"\r\n            // appendTo=\"body\"\r\n            // defaultValue={meter.fields.month}\r\n            // value={meter.fields.month}\r\n            options={months}\r\n            onChange={(e) => onInputChange(e, \"month\")}\r\n            optionLabel=\"month\"\r\n            placeholder=\"Month\"\r\n          />\r\n          {submitted && !meter.fields.month && (\r\n            <small className=\"p-error\">Month is required.</small>\r\n          )}\r\n        </div> */}\r\n\r\n        {/* ///////////////////////////////////////////// */}\r\n\r\n        <div className=\"p-field\">\r\n          <label htmlFor=\"month\" className=\"p-sr-only\">\r\n            Month\r\n          </label>\r\n          <InputText\r\n            id=\"month\"\r\n            type=\"text\"\r\n            placeholder=\"Month\"\r\n            defaultValue={meter.fields.month}\r\n            onChange={(e) => onInputChange(e, \"month\")}\r\n            required\r\n          />\r\n          {submitted && !meter.fields.month && (\r\n            <small className=\"p-error\">Month is required.</small>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"p-field\">\r\n          <label htmlFor=\"zippedMeterFile\" className=\"p-sr-only\">\r\n            Meter Zip File{\" \"}\r\n          </label>\r\n          <input\r\n            id=\"zippedMeterFile\"\r\n            type=\"file\"\r\n            onChange={(e) => onFileChange(e, \"zippedMeterFile\")}\r\n            required\r\n            // rows={5}\r\n            // cols={10}\r\n            // defaultValue={meter.fields.year}\r\n          />\r\n          {submitted && !meter.fields.zippedMeterFile && (\r\n            <small className=\"p-error\">File is required.</small>\r\n          )}\r\n        </div>\r\n        {/* // onChange={(evt) => setMeterZippedFile(evt.target.files[0])} */}\r\n\r\n        {/* <div className=\"p-field\">\r\n          <label className=\"p-sr-only\">Year</label>\r\n\r\n          <InputText\r\n            type=\"text\"\r\n            defaultValue={meter.fields.year}\r\n            placeholder=\"Year\"\r\n            onChange={(evt) => setYear(evt.target.value)}\r\n          />\r\n          {submitted && !meter.name && (\r\n            <small className=\"p-error\">Name is required.</small>\r\n          )}\r\n        </div> */}\r\n\r\n        {/* <div className=\"p-field\">\r\n          <label className=\"p-sr-only\">Month</label>\r\n          <InputText\r\n            type=\"text\"\r\n            defaultValue={meter.fields.month}\r\n            placeholder=\"Month\"\r\n            onChange={(evt) => setMonth(evt.target.value)}\r\n          />\r\n        </div> */}\r\n\r\n        {/* <div className=\"p-field\">\r\n          <label className=\"p-sr-only\">Meter Zip File </label>\r\n\r\n          <input\r\n            type=\"file\"\r\n            // defaultValue=\"fff\"\r\n            onChange={(evt) => setMeterZippedFile(evt.target.files[0])}\r\n          />\r\n        </div> */}\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        visible={deleteMeterDialog}\r\n        style={{ width: \"450px\" }}\r\n        header=\"Confirm\"\r\n        modal\r\n        footer={deleteMeterDialogFooter}\r\n        onHide={hideDeleteMeterDialog}\r\n      >\r\n        <div className=\"confirmation-content\">\r\n          <i\r\n            className=\"pi pi-exclamation-triangle p-mr-3\"\r\n            style={{ fontSize: \"2rem\" }}\r\n          />\r\n          {meter && (\r\n            <span>\r\n              Are you sure you want to delete{\" \"}\r\n              <b>{meter.fields.zippedMeterFile}</b>?\r\n            </span>\r\n          )}\r\n        </div>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        visible={deleteMetersDialog}\r\n        style={{ width: \"450px\" }}\r\n        header=\"Confirm\"\r\n        modal\r\n        footer={deleteMetersDialogFooter}\r\n        onHide={hideDeleteMetersDialog}\r\n      >\r\n        <div className=\"confirmation-content\">\r\n          <i\r\n            className=\"pi pi-exclamation-triangle p-mr-3\"\r\n            style={{ fontSize: \"2rem\" }}\r\n          />\r\n          {meter && (\r\n            <span>\r\n              Are you sure you want to delete the selected Meter Data?\r\n            </span>\r\n          )}\r\n        </div>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<DataTableCrudDemo />, rootElement);\r\n","D:\\mdp\\mdp-front-end\\src\\tempSave.js",[],"D:\\mdp\\mdp-front-end\\src\\AppWrapper.js",["199","200","201","202","203","204"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useLocation,\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n} from \"react-router-dom\";\r\nimport DataTable from \"./DataTable\";\r\nimport ParticularMeter from \"./ParticularMeter\";\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        {/* <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/about\">About</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/users\">Users</Link>\r\n            </li>\r\n          </ul>\r\n        </nav> */}\r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path=\"/about\">\r\n            <About />\r\n          </Route>\r\n          <Route path=\"/meterFile/:meterIdParam\">\r\n            <ParticularMeter />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <DataTable />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n  return <h2>Home</h2>;\r\n}\r\n\r\nfunction About() {\r\n  return <h2>About</h2>;\r\n}\r\n","D:\\mdp\\mdp-front-end\\src\\ParticularMeter.js",["205","206","207","208","209"],"D:\\mdp\\mdp-front-end\\src\\FolderStructure.js",["210","211","212","213"],"import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nimport Tree from \"./Tree/Tree\";\r\nimport { Sidebar } from \"primereact/sidebar\";\r\nimport { Button } from \"primereact/button\";\r\nimport SidebarActions from \"./SidebarActions\";\r\nimport axios from \"axios\";\r\n\r\nexport default function FolderStructure(props) {\r\n  // Just add objects to this\r\n  const FileTypeMap = {\r\n    NPCFiles: {\r\n      _fileName: \"NPC File\",\r\n      _changeMethod: \"changeNPCFile\",\r\n      _downloadMethod: \"downloadNPCFile\",\r\n    },\r\n    RealMeterMWHFiles: {\r\n      _fileName: \"Real Meter MWH Files\",\r\n      _changeMethod: \"changeRealMeterMWHFile\",\r\n      _downloadMethod: \"downloadRealMeterMWHFile\",\r\n    },\r\n    FictMeterMWHFiles: {\r\n      _fileName: \"Fictitious Meter MWH Files\",\r\n      _changeMethod: \"changeFictMeterMWHFile\",\r\n      _downloadMethod: \"downloadFictMeterMWHFile\",\r\n    },\r\n  };\r\n\r\n  // const [data, setData] = useState([JSON.parse(props.dir)]);\r\n  const [data, setData] = useState([]);\r\n\r\n  const [fileName, setFileName] = useState(null);\r\n  const [changeMethod, setChangeMethod] = useState(null);\r\n  const [downloadMethod, setdownloadMethod] = useState(null);\r\n\r\n  const [visibleRight, setVisibleRight] = useState(false);\r\n  // const [nodePath, setNodePath] = useState(null);\r\n  const [nodeName, setNodeName] = useState(null);\r\n  const [nodeId, setNodeId] = useState(null);\r\n\r\n  const [fileToUpload, setFileToUpload] = useState(null);\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log(props);\r\n    setData([props.dir]);\r\n    setFileName(FileTypeMap[props.fileType]._fileName);\r\n    setChangeMethod(FileTypeMap[props.fileType]._changeMethod);\r\n    setdownloadMethod(FileTypeMap[props.fileType]._downloadMethod);\r\n  }, [props]);\r\n  // const SidebarDemo = () => {\r\n  //   return (\r\n  //     <div>\r\n  //       <div className=\"card\">\r\n  //         {/* <Button\r\n  //           icon=\"pi pi-arrow-left\"\r\n  //           onClick={() => setVisibleRight(true)}\r\n  //           className=\"p-mr-2\"\r\n  //         /> */}\r\n  //       </div>\r\n  //     </div>\r\n  //   );\r\n  // };\r\n\r\n  const saveFile = () => {\r\n    setSubmitted(true);\r\n    // setVisibleRight(false)\r\n    if (fileToUpload) {\r\n      const uploadData = new FormData();\r\n\r\n      uploadData.append(\"fileToUpload\", fileToUpload, fileToUpload.name);\r\n      console.log(uploadData);\r\n      axios\r\n        .post(\r\n          \"http://127.0.0.1:8000/fifteenmmdp/\" +\r\n            changeMethod +\r\n            \"/\" +\r\n            props.meterId +\r\n            \"/\" +\r\n            nodeId,\r\n          uploadData\r\n        )\r\n        .then((response) => {\r\n          console.log(response);\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      console.log(nodeId);\r\n    }\r\n  };\r\n\r\n  const handleClick = (node) => {\r\n    console.log(node);\r\n    console.log(\"hiiiiiiiii\");\r\n    if (node.node.type == \"file\") {\r\n      // setNodePath(node.node.path);\r\n      setNodeName(node.node.name);\r\n      setNodeId(node.node.id);\r\n      setVisibleRight(true);\r\n      setSubmitted(false);\r\n    }\r\n  };\r\n  const handleUpdate = (state) => {\r\n    localStorage.setItem(\r\n      \"tree\",\r\n      JSON.stringify(state, function (key, value) {\r\n        if (key === \"parentNode\" || key === \"id\") {\r\n          return null;\r\n        }\r\n        return value;\r\n      })\r\n    );\r\n  };\r\n  const onFileChange = (e, name) => {\r\n    console.log(\"fine\");\r\n    setFileToUpload(e.target.files[0]);\r\n  };\r\n\r\n  // useLayoutEffect(() => {\r\n  //   try {\r\n  //     let savedStructure = JSON.parse(localStorage.getItem(\"tree\"));\r\n  //     if (savedStructure) {\r\n  //       setData(savedStructure);\r\n  //     }\r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Sidebar\r\n        visible={visibleRight}\r\n        position=\"right\"\r\n        baseZIndex={1000000}\r\n        onHide={() => {\r\n          setSubmitted(false);\r\n          setVisibleRight(false);\r\n        }}\r\n      >\r\n        <h5 style={{ fontWeight: \"normal\" }}>\r\n          {\"Change \" + fileName}\r\n          <br />\r\n          <a\r\n            href={\r\n              \"http://127.0.0.1:8000/fifteenmmdp/\" +\r\n              downloadMethod +\r\n              \"/\" +\r\n              props.meterId +\r\n              \"/\" +\r\n              nodeId\r\n            }\r\n            download={\r\n              \"http://127.0.0.1:8000/fifteenmmdp/\" +\r\n              downloadMethod +\r\n              props.meterId +\r\n              \"/\" +\r\n              \"/\" +\r\n              nodeId\r\n            }\r\n          >\r\n            {\" \"}\r\n            {nodeName}{\" \"}\r\n          </a>\r\n        </h5>\r\n        <br />\r\n        <div className=\"p-field\">\r\n          <label htmlFor=\"fileToUpload\" className=\"p-sr-only\">\r\n            {\"Change \" + fileName}\r\n          </label>\r\n          <input\r\n            id=\"fileToUpload\"\r\n            type=\"file\"\r\n            onChange={(e) => onFileChange(e, \"fileToUpload\")}\r\n            required\r\n            // rows={5}\r\n            // cols={10}\r\n            // defaultValue={meter.fields.year}\r\n          />\r\n          {submitted && !fileToUpload && (\r\n            <small className=\"p-error\">File is required.</small>\r\n          )}\r\n        </div>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() => saveFile()}\r\n          label=\"Save\"\r\n          className=\"p-button-success\"\r\n          style={{ marginRight: \".25em\" }}\r\n        />\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            setSubmitted(false);\r\n            setVisibleRight(false);\r\n          }}\r\n          label=\"Cancel\"\r\n          className=\"p-button-secondary\"\r\n        />\r\n      </Sidebar>\r\n\r\n      <Tree data={data} onUpdate={handleUpdate} onNodeClick={handleClick} />\r\n    </div>\r\n  );\r\n}\r\n","D:\\mdp\\mdp-front-end\\src\\Tree\\Tree.js",["214"],"import React, { useState, useReducer, useLayoutEffect } from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport { ThemeProvider } from \"styled-components\";\r\n\r\nimport { useDidMountEffect } from \"../utils\";\r\nimport { TreeContext, reducer } from \"./state\";\r\n\r\nimport { StyledTree } from \"./Tree.style.js\";\r\nimport { Folder } from \"./Folder/TreeFolder.js\";\r\nimport { File } from \"./File/TreeFile.js\";\r\n\r\nconst Tree = ({ children, data, onNodeClick, onUpdate }) => {\r\n  const [state, dispatch] = useReducer(reducer, data);\r\n\r\n  useLayoutEffect(() => {\r\n    dispatch({ type: \"SET_DATA\", payload: data });\r\n  }, [data]);\r\n\r\n  useDidMountEffect(() => {\r\n    onUpdate && onUpdate(state);\r\n  }, [state]);\r\n\r\n  const isImparative = data && !children;\r\n\r\n  return (\r\n    <ThemeProvider theme={{ indent: 20 }}>\r\n      <TreeContext.Provider\r\n        value={{\r\n          isImparative,\r\n          state,\r\n          dispatch,\r\n          onNodeClick: (node) => {\r\n            onNodeClick && onNodeClick(node);\r\n          },\r\n        }}\r\n      >\r\n        <StyledTree>\r\n          {isImparative ? (\r\n            <TreeRecusive data={state} parentNode={state} />\r\n          ) : (\r\n            children\r\n          )}\r\n        </StyledTree>\r\n      </TreeContext.Provider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nconst TreeRecusive = ({ data, parentNode }) => {\r\n  return data.map((item) => {\r\n    item.parentNode = parentNode;\r\n    if (!parentNode) {\r\n      item.parentNode = data;\r\n    }\r\n    if (!item.id) item.id = v4();\r\n\r\n    if (item.type === \"file\") {\r\n      return <File key={item.id} id={item.id} name={item.name} node={item} />;\r\n    }\r\n    if (item.type === \"folder\") {\r\n      return (\r\n        <Folder key={item.id} id={item.id} name={item.name} node={item}>\r\n          <TreeRecusive parentNode={item} data={item.files} />\r\n        </Folder>\r\n      );\r\n    }\r\n  });\r\n};\r\n\r\nTree.File = File;\r\nTree.Folder = Folder;\r\n\r\nexport default Tree;\r\n","D:\\mdp\\mdp-front-end\\src\\Tree\\state\\index.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\state\\TreeContext.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\state\\reducer.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\state\\constants.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\File\\TreeFile.js",["215"],"import React, { useRef, useState } from \"react\";\r\nimport { AiOutlineFile, AiOutlineDelete, AiOutlineEdit } from \"react-icons/ai\";\r\n\r\nimport { StyledFile } from \"./TreeFile.style\";\r\nimport { useTreeContext } from \"../state/TreeContext\";\r\nimport { ActionsWrapper, StyledName } from \"../Tree.style.js\";\r\nimport { PlaceholderInput } from \"../TreePlaceholderInput\";\r\n\r\nimport { FILE } from \"../state/constants\";\r\nimport FILE_ICONS from \"../FileIcons\";\r\n\r\nconst File = ({ name, id, node }) => {\r\n  const { dispatch, isImparative, onNodeClick } = useTreeContext();\r\n  const [isEditing, setEditing] = useState(false);\r\n  const ext = useRef(\"\");\r\n\r\n  let splitted = name?.split(\".\");\r\n  ext.current = splitted[splitted.length - 1];\r\n\r\n  const toggleEditing = () => setEditing(!isEditing);\r\n  const commitEditing = (name) => {\r\n    dispatch({ type: FILE.EDIT, payload: { id, name } });\r\n    setEditing(false);\r\n  };\r\n  const commitDelete = (event) => {\r\n    // console.log(event);\r\n    // dispatch({ type: FILE.DELETE, payload: { id } });\r\n  };\r\n  const handleNodeClick = React.useCallback(\r\n    (e) => {\r\n      e.stopPropagation();\r\n      onNodeClick({ node });\r\n    },\r\n    [node]\r\n  );\r\n  const handleCancel = () => {\r\n    setEditing(false);\r\n  };\r\n\r\n  return (\r\n    <StyledFile onClick={handleNodeClick} className=\"tree__file\">\r\n      {isEditing ? (\r\n        <PlaceholderInput\r\n          type=\"file\"\r\n          style={{ paddingLeft: 0 }}\r\n          defaultValue={name}\r\n          onSubmit={commitEditing}\r\n          onCancel={handleCancel}\r\n        />\r\n      ) : (\r\n        <ActionsWrapper>\r\n          <StyledName>\r\n            {FILE_ICONS[ext.current] ? (\r\n              FILE_ICONS[ext.current]\r\n            ) : (\r\n              <AiOutlineFile />\r\n            )}\r\n            &nbsp;&nbsp;{name}\r\n          </StyledName>\r\n          {isImparative && (\r\n            <div className=\"actions\">\r\n              {/* <AiOutlineEdit onClick={toggleEditing} />\r\n              <AiOutlineDelete onClick={commitDelete} /> */}\r\n            </div>\r\n          )}\r\n        </ActionsWrapper>\r\n      )}\r\n    </StyledFile>\r\n  );\r\n};\r\n\r\nexport { File };\r\n","D:\\mdp\\mdp-front-end\\src\\Tree\\Folder\\TreeFolder.js",["216"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  AiOutlineFolderAdd,\r\n  AiOutlineFileAdd,\r\n  AiOutlineFolder,\r\n  AiOutlineFolderOpen,\r\n  AiOutlineDelete,\r\n  AiOutlineEdit,\r\n} from \"react-icons/ai\";\r\n\r\nimport {\r\n  ActionsWrapper,\r\n  Collapse,\r\n  StyledName,\r\n  VerticalLine,\r\n} from \"../Tree.style\";\r\nimport { StyledFolder } from \"./TreeFolder.style\";\r\n\r\nimport { FILE, FOLDER } from \"../state/constants\";\r\nimport { useTreeContext } from \"../state/TreeContext\";\r\nimport { PlaceholderInput } from \"../TreePlaceholderInput\";\r\n\r\nconst FolderName = ({ isOpen, name, handleClick }) => (\r\n  <StyledName onClick={handleClick}>\r\n    {isOpen ? <AiOutlineFolderOpen /> : <AiOutlineFolder />}\r\n    &nbsp;&nbsp;{name}\r\n  </StyledName>\r\n);\r\n\r\nconst Folder = ({ id, name, children, node }) => {\r\n  const { dispatch, isImparative, onNodeClick } = useTreeContext();\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [childs, setChilds] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setChilds([children]);\r\n  }, [children]);\r\n\r\n  const commitFolderCreation = (name) => {\r\n    dispatch({ type: FOLDER.CREATE, payload: { id, name } });\r\n  };\r\n  const commitFileCreation = (name) => {\r\n    dispatch({ type: FILE.CREATE, payload: { id, name } });\r\n  };\r\n  const commitDeleteFolder = () => {\r\n    dispatch({ type: FOLDER.DELETE, payload: { id } });\r\n  };\r\n  const commitFolderEdit = (name) => {\r\n    dispatch({ type: FOLDER.EDIT, payload: { id, name } });\r\n    setEditing(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setEditing(false);\r\n    setChilds([children]);\r\n  };\r\n\r\n  const handleNodeClick = React.useCallback(\r\n    (event) => {\r\n      event.stopPropagation();\r\n      onNodeClick({ node });\r\n    },\r\n    [node]\r\n  );\r\n\r\n  const handleFileCreation = (event) => {\r\n    event.stopPropagation();\r\n    setIsOpen(true);\r\n    setChilds([\r\n      ...childs,\r\n      <PlaceholderInput\r\n        type=\"file\"\r\n        onSubmit={commitFileCreation}\r\n        onCancel={handleCancel}\r\n      />,\r\n    ]);\r\n  };\r\n\r\n  const handleFolderCreation = (event) => {\r\n    event.stopPropagation();\r\n    setIsOpen(true);\r\n    setChilds([\r\n      ...childs,\r\n      <PlaceholderInput\r\n        type=\"folder\"\r\n        onSubmit={commitFolderCreation}\r\n        onCancel={handleCancel}\r\n      />,\r\n    ]);\r\n  };\r\n\r\n  const handleFolderRename = () => {\r\n    setIsOpen(true);\r\n    setEditing(true);\r\n  };\r\n\r\n  return (\r\n    <StyledFolder id={id} onClick={handleNodeClick} className=\"tree__folder\">\r\n      <VerticalLine>\r\n        <ActionsWrapper>\r\n          {isEditing ? (\r\n            <PlaceholderInput\r\n              type=\"folder\"\r\n              style={{ paddingLeft: 0 }}\r\n              defaultValue={name}\r\n              onCancel={handleCancel}\r\n              onSubmit={commitFolderEdit}\r\n            />\r\n          ) : (\r\n            <FolderName\r\n              name={name}\r\n              isOpen={isOpen}\r\n              handleClick={() => setIsOpen(!isOpen)}\r\n            />\r\n          )}\r\n\r\n          {isImparative && (\r\n            <div className=\"actions\">\r\n              {/* <AiOutlineEdit onClick={handleFolderRename} />\r\n              <AiOutlineFileAdd onClick={handleFileCreation} />\r\n              <AiOutlineFolderAdd onClick={handleFolderCreation} />\r\n              <AiOutlineDelete onClick={commitDeleteFolder} /> */}\r\n            </div>\r\n          )}\r\n        </ActionsWrapper>\r\n        <Collapse className=\"tree__folder--collapsible\" isOpen={isOpen}>\r\n          {childs}\r\n        </Collapse>\r\n      </VerticalLine>\r\n    </StyledFolder>\r\n  );\r\n};\r\n\r\nexport { Folder, FolderName };\r\n","D:\\mdp\\mdp-front-end\\src\\Tree\\Folder\\TreeFolder.style.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\Tree.style.js",[],"D:\\mdp\\mdp-front-end\\src\\utils.js",["217","218"],"import { useRef, useEffect } from \"react\";\r\n\r\n// @deprecated\r\nexport const findNodeById = (nodes, id) => {\r\n  let final;\r\n\r\n  function findNode(nodes, id) {\r\n    nodes.forEach((n) => {\r\n      if (n.id === id) {\r\n        final = n;\r\n        return;\r\n      }\r\n      if (n.files) findNode(n.files, id);\r\n    });\r\n  }\r\n\r\n  findNode(nodes, id);\r\n\r\n  return final;\r\n};\r\n\r\nexport const searchDFS = ({ data, cond, childPathKey = \"files\" }) => {\r\n  let final = null;\r\n  let parentPath = [];\r\n  let parent = null;\r\n  let next = null;\r\n  let prev = null;\r\n\r\n  const recursiveFind = (tree) => {\r\n    tree.forEach((item, index) => {\r\n      if (cond(item, index)) {\r\n        final = item;\r\n\r\n        if (parentPath) {\r\n          parentPath.forEach((p) => {\r\n            // check if parent has the `current item`\r\n            if (p && p[childPathKey].includes(item)) {\r\n              parent = p;\r\n              // set next & previous indexes\r\n              next = p[childPathKey][index + 1];\r\n              prev = p[childPathKey][index - 1];\r\n            } else {\r\n              parent = tree;\r\n              // if parent is null then check the root of the tree\r\n              next = tree[index + 1];\r\n              prev = tree[index - 1];\r\n            }\r\n          });\r\n        }\r\n        return;\r\n      }\r\n      if (item[childPathKey]) {\r\n        // push parent stack\r\n        parentPath.push(item);\r\n        recursiveFind(item[childPathKey]);\r\n      }\r\n    });\r\n  };\r\n\r\n  recursiveFind(data);\r\n  return {\r\n    parent,\r\n    item: final,\r\n    nextSibling: next,\r\n    previousSibling: prev,\r\n  };\r\n};\r\n\r\nexport const useDidMountEffect = (func, deps) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) func();\r\n    else didMount.current = true;\r\n  }, deps);\r\n};\r\n\r\nexport const createFile = ({ name }) => ({ name, type: \"file\" });\r\nexport const createFolder = ({ name }) => ({ name, type: \"folder\", files: [] });\r\n","D:\\mdp\\mdp-front-end\\src\\Tree\\File\\TreeFile.style.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\FileIcons.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\TreePlaceholderInput.js",["219"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport { AiOutlineFile } from \"react-icons/ai\";\r\n\r\nimport FILE_ICONS from \"./FileIcons\";\r\nimport { StyledFile } from \"./File/TreeFile.style\";\r\nimport { FolderName } from \"./Folder/TreeFolder\";\r\nimport { StyledFolder } from \"./Folder/TreeFolder.style\";\r\n\r\nconst FileEdit = ({ ext, inputRef, updateExt, defaultValue, style }) => {\r\n  const extension = FILE_ICONS[ext] ? FILE_ICONS[ext] : <AiOutlineFile />;\r\n\r\n  return (\r\n    <StyledFile className=\"tree__file\" style={style}>\r\n      {extension}\r\n      &nbsp;&nbsp;\r\n      <input\r\n        ref={inputRef}\r\n        onChange={updateExt}\r\n        defaultValue={defaultValue}\r\n        className=\"tree__input\"\r\n      />\r\n    </StyledFile>\r\n  );\r\n};\r\n\r\nconst FolderEdit = ({ name, inputRef, defaultValue, style }) => {\r\n  return (\r\n    <StyledFolder id={v4()} name={name} style={style}>\r\n      <FolderName\r\n        isOpen={true}\r\n        handleClick={() => {}}\r\n        name={\r\n          <input\r\n            ref={inputRef}\r\n            className=\"tree__input\"\r\n            defaultValue={defaultValue}\r\n          />\r\n        }\r\n      />\r\n    </StyledFolder>\r\n  );\r\n};\r\n\r\nconst PlaceholderInput = ({\r\n  type,\r\n  name,\r\n  onSubmit,\r\n  onCancel,\r\n  defaultValue,\r\n  style,\r\n}) => {\r\n  const [ext, setExt] = useState(\"\");\r\n  const inputRef = useRef();\r\n\r\n  const updateExt = (e) => {\r\n    let splitted = e.target.value.split(\".\");\r\n    let ext = splitted && splitted[splitted.length - 1];\r\n    setExt(ext);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!inputRef.current) return;\r\n    inputRef.current.focus();\r\n    inputRef.current.addEventListener(\"keyup\", (e) => {\r\n      if (e.key === \"Enter\") onSubmit(e.target.value);\r\n      if (e.key === \"Escape\") {\r\n        onCancel && onCancel();\r\n      }\r\n    });\r\n  }, [inputRef]);\r\n\r\n  return type === \"file\" ? (\r\n    <FileEdit\r\n      ext={ext}\r\n      style={style}\r\n      updateExt={updateExt}\r\n      inputRef={inputRef}\r\n      defaultValue={defaultValue}\r\n    />\r\n  ) : (\r\n    <FolderEdit\r\n      style={style}\r\n      name={name}\r\n      inputRef={inputRef}\r\n      defaultValue={defaultValue}\r\n    />\r\n  );\r\n};\r\n\r\nexport { PlaceholderInput };\r\n","D:\\mdp\\mdp-front-end\\src\\SidebarActions.js",[],"D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterMerge.js",["220","221","222","223","224","225","226","227"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  useRouteMatch,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport \"../cssFiles/Grid.css\";\r\nimport \"primeflex/primeflex.css\";\r\nimport { Fieldset } from \"primereact/fieldset\";\r\nimport { Button } from \"primereact/button\";\r\nimport axios from \"axios\";\r\n// import FolderStructure from \"../FolderStructure\";\r\n// import { Tag } from \"primereact/tag\";\r\nimport { Sidebar } from \"primereact/sidebar\";\r\nimport { Toast } from \"primereact/toast\";\r\nimport { ProgressBar } from \"primereact/progressbar\";\r\n\r\nexport default function ParticularMeter(props) {\r\n  let { meterIdParam } = useParams();\r\n  const [mergedFile, setMergedFile] = useState(null);\r\n  const [nodeName, setNodeName] = useState(null);\r\n  const [nodeId, setNodeId] = useState(null);\r\n  const [visibleRight, setVisibleRight] = useState(false);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [fileToUpload, setFileToUpload] = useState(null);\r\n  const toast = useRef(null);\r\n\r\n  const onFileChange = (e, name) => {\r\n    console.log(\"fine\");\r\n    setFileToUpload(e.target.files[0]);\r\n  };\r\n  const MergedFile = () => {\r\n    return (\r\n      <div>\r\n        <Button\r\n          onClick={() => {\r\n            setNodeName(mergedFile.fields.fileName);\r\n            setNodeId(mergedFile.pk);\r\n            setVisibleRight(true);\r\n            setSubmitted(false);\r\n          }}\r\n          label={mergedFile.fields.fileName}\r\n          className=\"p-button-link\"\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  useEffect(() => {\r\n    fetch(\"http://127.0.0.1:8000/fifteenmmdp/getMergedFile/\" + meterIdParam)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        if (result.length == 1) {\r\n          setMergedFile(result[0]);\r\n        }\r\n        console.log(result.length);\r\n      });\r\n  }, []);\r\n  const saveFile = () => {\r\n    setSubmitted(true);\r\n    setVisibleRight(false);\r\n    if (fileToUpload) {\r\n      const uploadData = new FormData();\r\n\r\n      uploadData.append(\"fileToUpload\", fileToUpload, fileToUpload.name);\r\n      console.log(uploadData);\r\n      axios\r\n        .post(\r\n          \"http://127.0.0.1:8000/fifteenmmdp/changeMergedFile/\" + nodeId,\r\n          uploadData\r\n        )\r\n        .then((response) => {\r\n          console.log(response);\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          toast.current.show({\r\n            severity: \"error\",\r\n            summary: \"Unsuccessful\",\r\n            detail: \"Some error occured\",\r\n            life: 3000,\r\n          });\r\n        });\r\n    } else {\r\n      console.log(nodeId);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Toast ref={toast} />\r\n\r\n      <Sidebar\r\n        visible={visibleRight}\r\n        position=\"right\"\r\n        baseZIndex={1000000}\r\n        onHide={() => {\r\n          setSubmitted(false);\r\n          setVisibleRight(false);\r\n        }}\r\n      >\r\n        <h5 style={{ fontWeight: \"normal\" }}>\r\n          Change Merged File\r\n          <br />\r\n          <a\r\n            href={\r\n              \"http://127.0.0.1:8000/fifteenmmdp/downloadMergedFile/\" + nodeId\r\n            }\r\n            download={\r\n              \"http://127.0.0.1:8000/fifteenmmdp/downloadMergedFile/\" + nodeId\r\n            }\r\n          >\r\n            {\" \"}\r\n            {nodeName}{\" \"}\r\n          </a>\r\n        </h5>\r\n        <br />\r\n        <div className=\"p-field\">\r\n          <label htmlFor=\"fileToUpload\" className=\"p-sr-only\">\r\n            Merged File{\" \"}\r\n          </label>\r\n          <input\r\n            id=\"fileToUpload\"\r\n            type=\"file\"\r\n            onChange={(e) => onFileChange(e, \"fileToUpload\")}\r\n            required\r\n            // rows={5}\r\n            // cols={10}\r\n            // defaultValue={meter.fields.year}\r\n          />\r\n          {submitted && !fileToUpload && (\r\n            <small className=\"p-error\">File is required.</small>\r\n          )}\r\n        </div>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() => saveFile()}\r\n          label=\"Save\"\r\n          className=\"p-button-success\"\r\n          style={{ marginRight: \".25em\" }}\r\n        />\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            setSubmitted(false);\r\n            setVisibleRight(false);\r\n          }}\r\n          label=\"Cancel\"\r\n          className=\"p-button-secondary\"\r\n        />\r\n      </Sidebar>\r\n      <div className=\"p-col\">\r\n        <Fieldset legend=\"Merged File\" toggleable>\r\n          {props.progressbarVisible ? (\r\n            <>\r\n              <h5>Processing</h5>\r\n              <ProgressBar\r\n                mode=\"indeterminate\"\r\n                style={{ height: \"6px\" }}\r\n              ></ProgressBar>\r\n            </>\r\n          ) : mergedFile ? (\r\n            <MergedFile />\r\n          ) : (\r\n            \"Not Merged yet\"\r\n          )}\r\n        </Fieldset>\r\n      </div>\r\n      <div className=\"p-col\">\r\n        <Fieldset legend=\"Error during Merge\" toggleable>\r\n          {props.ErrorMessage}\r\n        </Fieldset>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterValidate.js",["228","229","230","231","232","233","234","235"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  useRouteMatch,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport \"../cssFiles/Grid.css\";\r\nimport \"primeflex/primeflex.css\";\r\nimport { Fieldset } from \"primereact/fieldset\";\r\nimport { Button } from \"primereact/button\";\r\nimport axios from \"axios\";\r\nimport { ProgressBar } from \"primereact/progressbar\";\r\nimport { Sidebar } from \"primereact/sidebar\";\r\nimport { Toast } from \"primereact/toast\";\r\n\r\nexport default function ParticularMeter(props) {\r\n  let { meterIdParam } = useParams();\r\n\r\n  const [validatedFile, setValidatedFile] = useState(null);\r\n  const [nodeName, setNodeName] = useState(null);\r\n  const [nodeId, setNodeId] = useState(null);\r\n  const [visibleRight, setVisibleRight] = useState(false);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [fileToUpload, setFileToUpload] = useState(null);\r\n  const toast = useRef(null);\r\n\r\n  const onFileChange = (e, name) => {\r\n    console.log(\"fine\");\r\n    setFileToUpload(e.target.files[0]);\r\n  };\r\n  const ValidatedFile = () => {\r\n    return (\r\n      <div>\r\n        <Button\r\n          onClick={() => {\r\n            setNodeName(validatedFile.fields.fileName);\r\n            setNodeId(validatedFile.pk);\r\n            setVisibleRight(true);\r\n            setSubmitted(false);\r\n          }}\r\n          label={validatedFile.fields.fileName}\r\n          className=\"p-button-link\"\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  useEffect(() => {\r\n    fetch(\"http://127.0.0.1:8000/fifteenmmdp/getValidatedFile/\" + meterIdParam)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        if (result.length == 1) {\r\n          setValidatedFile(result[0]);\r\n        }\r\n        console.log(result.length);\r\n      });\r\n  }, []);\r\n  const saveFile = () => {\r\n    setSubmitted(true);\r\n    setVisibleRight(false);\r\n    if (fileToUpload) {\r\n      const uploadData = new FormData();\r\n\r\n      uploadData.append(\"fileToUpload\", fileToUpload, fileToUpload.name);\r\n      console.log(uploadData);\r\n      axios\r\n        .post(\r\n          \"http://127.0.0.1:8000/fifteenmmdp/changeValidatedFile/\" + nodeId,\r\n          uploadData\r\n        )\r\n        .then((response) => {\r\n          console.log(response);\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          toast.current.show({\r\n            severity: \"error\",\r\n            summary: \"Unsuccessful\",\r\n            detail: \"Some error occured\",\r\n            life: 3000,\r\n          });\r\n        });\r\n    } else {\r\n      console.log(nodeId);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Toast ref={toast} />\r\n      <Sidebar\r\n        visible={visibleRight}\r\n        position=\"right\"\r\n        baseZIndex={1000000}\r\n        onHide={() => {\r\n          setSubmitted(false);\r\n          setVisibleRight(false);\r\n        }}\r\n      >\r\n        <h5 style={{ fontWeight: \"normal\" }}>\r\n          Change Validated File\r\n          <br />\r\n          <a\r\n            href={\r\n              \"http://127.0.0.1:8000/fifteenmmdp/downloadValidatedFile/\" +\r\n              nodeId\r\n            }\r\n            download={\r\n              \"http://127.0.0.1:8000/fifteenmmdp/downloadValidatedFile/\" +\r\n              nodeId\r\n            }\r\n          >\r\n            {\" \"}\r\n            {nodeName}{\" \"}\r\n          </a>\r\n        </h5>\r\n        <br />\r\n        <div className=\"p-field\">\r\n          <label htmlFor=\"fileToUpload\" className=\"p-sr-only\">\r\n            Validated File{\" \"}\r\n          </label>\r\n          <input\r\n            id=\"fileToUpload\"\r\n            type=\"file\"\r\n            onChange={(e) => onFileChange(e, \"fileToUpload\")}\r\n            required\r\n            // rows={5}\r\n            // cols={10}\r\n            // defaultValue={meter.fields.year}\r\n          />\r\n          {submitted && !fileToUpload && (\r\n            <small className=\"p-error\">File is required.</small>\r\n          )}\r\n        </div>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() => saveFile()}\r\n          label=\"Save\"\r\n          className=\"p-button-success\"\r\n          style={{ marginRight: \".25em\" }}\r\n        />\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            setSubmitted(false);\r\n            setVisibleRight(false);\r\n          }}\r\n          label=\"Cancel\"\r\n          className=\"p-button-secondary\"\r\n        />\r\n      </Sidebar>\r\n      <div className=\"p-col\">\r\n        <Fieldset legend=\"Date Filtered File Validated\" toggleable>\r\n          {props.progressbarVisible ? (\r\n            <>\r\n              <h5>Processing</h5>\r\n              <ProgressBar\r\n                mode=\"indeterminate\"\r\n                style={{ height: \"6px\" }}\r\n              ></ProgressBar>\r\n            </>\r\n          ) : validatedFile ? (\r\n            <ValidatedFile />\r\n          ) : (\r\n            \"Not Validated yet\"\r\n          )}\r\n        </Fieldset>\r\n      </div>\r\n      <div className=\"p-col\">\r\n        <Fieldset legend=\"Error during Validate\" toggleable>\r\n          {props.ErrorMessage}\r\n        </Fieldset>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterExtract.js",["236","237","238","239","240","241","242","243","244"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  useRouteMatch,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport \"../cssFiles/Grid.css\";\r\nimport \"primeflex/primeflex.css\";\r\nimport { Fieldset } from \"primereact/fieldset\";\r\nimport { Button } from \"primereact/button\";\r\nimport axios from \"axios\";\r\nimport FolderStructure from \"../FolderStructure\";\r\nimport { ProgressBar } from \"primereact/progressbar\";\r\n\r\nexport default function ParticularMeterExtract(props) {\r\n  let emptyMeter = {\r\n    model: \"fifteenmmdp.allmeterfiles\",\r\n    pk: null,\r\n    fields: {\r\n      year: \"\",\r\n      month: \"\",\r\n      zippedMeterFile: null,\r\n      dirStructure: null,\r\n      status: null,\r\n      dirStructureRealMWH: null,\r\n      dirStructureFictMWH: null,\r\n      dirStructureFinalOutput: null,\r\n    },\r\n  };\r\n  //   const location = useLocation();\r\n  let { meterIdParam } = useParams();\r\n  let match = useRouteMatch();\r\n\r\n  const [meter, setMeter] = useState(emptyMeter);\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://127.0.0.1:8000/fifteenmmdp/getMeterData/\" + meterIdParam)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        setMeter(result[0]);\r\n        console.log(result);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"p-col\">\r\n        <Fieldset legend=\"NPC Files\" toggleable>\r\n          {props.progressbarVisible ? (\r\n            <>\r\n              <h5>Processing</h5>\r\n              <ProgressBar\r\n                mode=\"indeterminate\"\r\n                style={{ height: \"6px\" }}\r\n              ></ProgressBar>\r\n            </>\r\n          ) : meter.fields.dirStructure ? (\r\n            <FolderStructure\r\n              dir={meter.fields.dirStructure}\r\n              fileType=\"NPCFiles\"\r\n            />\r\n          ) : (\r\n            \"Meter File not extracted yet\"\r\n          )}\r\n        </Fieldset>\r\n      </div>\r\n      <div className=\"p-col\">\r\n        <Fieldset legend=\"Error during Extract\" toggleable>\r\n          {props.ErrorMessage}\r\n        </Fieldset>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterMWH.js",["245","246","247","248","249","250","251","252"],"D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterDateFilter.js",["253","254","255","256","257","258","259","260","261"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  useRouteMatch,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport \"../cssFiles/Grid.css\";\r\nimport \"primeflex/primeflex.css\";\r\nimport { Fieldset } from \"primereact/fieldset\";\r\nimport { Button } from \"primereact/button\";\r\nimport axios from \"axios\";\r\nimport FolderStructure from \"../FolderStructure\";\r\nimport { ProgressBar } from \"primereact/progressbar\";\r\nimport { Sidebar } from \"primereact/sidebar\";\r\nimport { Toast } from \"primereact/toast\";\r\n\r\nexport default function ParticularMeter(props) {\r\n  let { meterIdParam } = useParams();\r\n\r\n  const [dateFilteredFile, setDateFilteredFile] = useState(null);\r\n  const [nodeName, setNodeName] = useState(null);\r\n  const [nodeId, setNodeId] = useState(null);\r\n  const [visibleRight, setVisibleRight] = useState(false);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [fileToUpload, setFileToUpload] = useState(null);\r\n  const toast = useRef(null);\r\n\r\n  const onFileChange = (e, name) => {\r\n    console.log(\"fine\");\r\n    setFileToUpload(e.target.files[0]);\r\n  };\r\n  const DateFilteredFile = () => {\r\n    return (\r\n      <div>\r\n        <Button\r\n          onClick={() => {\r\n            setNodeName(dateFilteredFile.fields.fileName);\r\n            setNodeId(dateFilteredFile.pk);\r\n            setVisibleRight(true);\r\n            setSubmitted(false);\r\n          }}\r\n          label={dateFilteredFile.fields.fileName}\r\n          className=\"p-button-link\"\r\n        />{\" \"}\r\n        <a\r\n          href={\r\n            \"http://127.0.0.1:8000/fifteenmmdp/downloadNrxFile/\" + meterIdParam\r\n          }\r\n        >\r\n          <Button label=\"NRX File\" className=\"p-button-link\" />\r\n        </a>\r\n      </div>\r\n    );\r\n  };\r\n  useEffect(() => {\r\n    fetch(\r\n      \"http://127.0.0.1:8000/fifteenmmdp/getDateFilteredFile/\" + meterIdParam\r\n    )\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        if (result.length == 1) {\r\n          setDateFilteredFile(result[0]);\r\n        }\r\n        console.log(result.length);\r\n      });\r\n  }, []);\r\n  const saveFile = () => {\r\n    setSubmitted(true);\r\n    setVisibleRight(false);\r\n    if (fileToUpload) {\r\n      const uploadData = new FormData();\r\n\r\n      uploadData.append(\"fileToUpload\", fileToUpload, fileToUpload.name);\r\n      console.log(uploadData);\r\n      axios\r\n        .post(\r\n          \"http://127.0.0.1:8000/fifteenmmdp/changeDateFilteredFile/\" + nodeId,\r\n          uploadData\r\n        )\r\n        .then((response) => {\r\n          console.log(response);\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          toast.current.show({\r\n            severity: \"error\",\r\n            summary: \"Unsuccessful\",\r\n            detail: \"Some error occured\",\r\n            life: 3000,\r\n          });\r\n        });\r\n    } else {\r\n      console.log(nodeId);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Toast ref={toast} />\r\n      <Sidebar\r\n        visible={visibleRight}\r\n        position=\"right\"\r\n        baseZIndex={1000000}\r\n        onHide={() => {\r\n          setSubmitted(false);\r\n          setVisibleRight(false);\r\n        }}\r\n      >\r\n        <h5 style={{ fontWeight: \"normal\" }}>\r\n          Change Date Filtered File\r\n          <br />\r\n          <a\r\n            href={\r\n              \"http://127.0.0.1:8000/fifteenmmdp/downloadDateFilteredFile/\" +\r\n              nodeId\r\n            }\r\n            download={\r\n              \"http://127.0.0.1:8000/fifteenmmdp/downloadDateFilteredFile/\" +\r\n              nodeId\r\n            }\r\n          >\r\n            {\" \"}\r\n            {nodeName}{\" \"}\r\n          </a>\r\n        </h5>\r\n        <br />\r\n        <div className=\"p-field\">\r\n          <label htmlFor=\"fileToUpload\" className=\"p-sr-only\">\r\n            Date Filtered File{\" \"}\r\n          </label>\r\n          <input\r\n            id=\"fileToUpload\"\r\n            type=\"file\"\r\n            onChange={(e) => onFileChange(e, \"fileToUpload\")}\r\n            required\r\n            // rows={5}\r\n            // cols={10}\r\n            // defaultValue={meter.fields.year}\r\n          />\r\n          {submitted && !fileToUpload && (\r\n            <small className=\"p-error\">File is required.</small>\r\n          )}\r\n        </div>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() => saveFile()}\r\n          label=\"Save\"\r\n          className=\"p-button-success\"\r\n          style={{ marginRight: \".25em\" }}\r\n        />\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            setSubmitted(false);\r\n            setVisibleRight(false);\r\n          }}\r\n          label=\"Cancel\"\r\n          className=\"p-button-secondary\"\r\n        />\r\n      </Sidebar>\r\n      <div className=\"p-col\">\r\n        <Fieldset legend=\"Merged File Date Filtered\" toggleable>\r\n          {props.progressbarVisible ? (\r\n            <>\r\n              <h5>Processing</h5>\r\n              <ProgressBar\r\n                mode=\"indeterminate\"\r\n                style={{ height: \"6px\" }}\r\n              ></ProgressBar>\r\n            </>\r\n          ) : dateFilteredFile ? (\r\n            <DateFilteredFile />\r\n          ) : (\r\n            \"Not Date Filtered yet\"\r\n          )}\r\n        </Fieldset>\r\n      </div>\r\n      <div className=\"p-col\">\r\n        <Fieldset legend=\"Error during Date Filter\" toggleable>\r\n          {props.ErrorMessage}\r\n        </Fieldset>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterFinalOutput.js",["262","263","264","265","266","267","268","269","270","271","272"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  useRouteMatch,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport \"../cssFiles/Grid.css\";\r\nimport \"primeflex/primeflex.css\";\r\nimport { Fieldset } from \"primereact/fieldset\";\r\nimport { Button } from \"primereact/button\";\r\nimport axios from \"axios\";\r\nimport FolderStructure from \"../FolderStructure\";\r\n\r\nexport default function ParticularMeter(props) {\r\n  let { meterIdParam } = useParams();\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://127.0.0.1:8000/fifteenmmdp/getMeterData/\" + meterIdParam)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        // setMeter(result[0]);\r\n        console.log(result);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"p-col\">\r\n      <Fieldset legend=\"Final Output\" toggleable>\r\n        Not processed yet\r\n      </Fieldset>\r\n    </div>\r\n  );\r\n}\r\n","D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterFict.js",["273","274","275","276","277","278","279","280"],"D:\\mdp\\mdp-front-end\\src\\ParticularMeterStaging\\ParticularMeterAnalyse.js",["281","282","283","284","285","286","287","288","289","290","291"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  useRouteMatch,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport \"../cssFiles/Grid.css\";\r\nimport \"primeflex/primeflex.css\";\r\nimport { Fieldset } from \"primereact/fieldset\";\r\nimport { Button } from \"primereact/button\";\r\nimport axios from \"axios\";\r\nimport FolderStructure from \"../FolderStructure\";\r\n\r\nexport default function ParticularMeter(props) {\r\n  let { meterIdParam } = useParams();\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://127.0.0.1:8000/fifteenmmdp/getMeterData/\" + meterIdParam)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        // setMeter(result[0]);\r\n        console.log(result);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"p-col\">\r\n      <Fieldset legend=\"Analyse\" toggleable>\r\n        Not processed yet\r\n      </Fieldset>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"292","severity":1,"message":"293","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":25},{"ruleId":"292","severity":1,"message":"296","line":1,"column":27,"nodeType":"294","messageId":"295","endLine":1,"endColumn":36},{"ruleId":"292","severity":1,"message":"297","line":3,"column":8,"nodeType":"294","messageId":"295","endLine":3,"endColumn":22},{"ruleId":"292","severity":1,"message":"298","line":4,"column":8,"nodeType":"294","messageId":"295","endLine":4,"endColumn":22},{"ruleId":"292","severity":1,"message":"299","line":6,"column":8,"nodeType":"294","messageId":"295","endLine":6,"endColumn":17},{"ruleId":"292","severity":1,"message":"300","line":7,"column":8,"nodeType":"294","messageId":"295","endLine":7,"endColumn":16},{"ruleId":"292","severity":1,"message":"301","line":8,"column":27,"nodeType":"294","messageId":"295","endLine":8,"endColumn":33},{"ruleId":"292","severity":1,"message":"302","line":8,"column":35,"nodeType":"294","messageId":"295","endLine":8,"endColumn":41},{"ruleId":"292","severity":1,"message":"303","line":8,"column":43,"nodeType":"294","messageId":"295","endLine":8,"endColumn":48},{"ruleId":"292","severity":1,"message":"304","line":8,"column":50,"nodeType":"294","messageId":"295","endLine":8,"endColumn":54},{"ruleId":"292","severity":1,"message":"305","line":9,"column":8,"nodeType":"294","messageId":"295","endLine":9,"endColumn":22},{"ruleId":"306","replacedBy":"307"},{"ruleId":"308","replacedBy":"309"},{"ruleId":"306","replacedBy":"310"},{"ruleId":"308","replacedBy":"311"},{"ruleId":"292","severity":1,"message":"312","line":6,"column":8,"nodeType":"294","messageId":"295","endLine":6,"endColumn":16},{"ruleId":"292","severity":1,"message":"312","line":6,"column":8,"nodeType":"294","messageId":"295","endLine":6,"endColumn":16},{"ruleId":"292","severity":1,"message":"313","line":11,"column":10,"nodeType":"294","messageId":"295","endLine":11,"endColumn":18},{"ruleId":"292","severity":1,"message":"314","line":12,"column":10,"nodeType":"294","messageId":"295","endLine":12,"endColumn":21},{"ruleId":"292","severity":1,"message":"315","line":13,"column":10,"nodeType":"294","messageId":"295","endLine":13,"endColumn":18},{"ruleId":"292","severity":1,"message":"316","line":14,"column":10,"nodeType":"294","messageId":"295","endLine":14,"endColumn":23},{"ruleId":"292","severity":1,"message":"317","line":16,"column":10,"nodeType":"294","messageId":"295","endLine":16,"endColumn":20},{"ruleId":"292","severity":1,"message":"312","line":6,"column":8,"nodeType":"294","messageId":"295","endLine":6,"endColumn":16},{"ruleId":"292","severity":1,"message":"318","line":11,"column":8,"nodeType":"294","messageId":"295","endLine":11,"endColumn":18},{"ruleId":"292","severity":1,"message":"317","line":17,"column":10,"nodeType":"294","messageId":"295","endLine":17,"endColumn":20},{"ruleId":"292","severity":1,"message":"319","line":18,"column":10,"nodeType":"294","messageId":"295","endLine":18,"endColumn":16},{"ruleId":"292","severity":1,"message":"316","line":20,"column":10,"nodeType":"294","messageId":"295","endLine":20,"endColumn":23},{"ruleId":"292","severity":1,"message":"314","line":21,"column":10,"nodeType":"294","messageId":"295","endLine":21,"endColumn":21},{"ruleId":"292","severity":1,"message":"320","line":22,"column":10,"nodeType":"294","messageId":"295","endLine":22,"endColumn":21},{"ruleId":"292","severity":1,"message":"315","line":25,"column":10,"nodeType":"294","messageId":"295","endLine":25,"endColumn":18},{"ruleId":"292","severity":1,"message":"321","line":56,"column":9,"nodeType":"294","messageId":"295","endLine":56,"endColumn":23},{"ruleId":"292","severity":1,"message":"322","line":67,"column":9,"nodeType":"294","messageId":"295","endLine":67,"endColumn":15},{"ruleId":"292","severity":1,"message":"323","line":113,"column":9,"nodeType":"294","messageId":"295","endLine":113,"endColumn":33},{"ruleId":"324","severity":1,"message":"325","line":172,"column":32,"nodeType":"326","messageId":"327","endLine":172,"endColumn":34},{"ruleId":"324","severity":1,"message":"325","line":173,"column":33,"nodeType":"326","messageId":"327","endLine":173,"endColumn":35},{"ruleId":"292","severity":1,"message":"328","line":241,"column":9,"nodeType":"294","messageId":"295","endLine":241,"endColumn":18},{"ruleId":"292","severity":1,"message":"329","line":293,"column":9,"nodeType":"294","messageId":"295","endLine":293,"endColumn":30},{"ruleId":"292","severity":1,"message":"293","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":25},{"ruleId":"292","severity":1,"message":"296","line":1,"column":27,"nodeType":"294","messageId":"295","endLine":1,"endColumn":36},{"ruleId":"292","severity":1,"message":"330","line":1,"column":38,"nodeType":"294","messageId":"295","endLine":1,"endColumn":44},{"ruleId":"292","severity":1,"message":"331","line":3,"column":3,"nodeType":"294","messageId":"295","endLine":3,"endColumn":14},{"ruleId":"292","severity":1,"message":"304","line":7,"column":3,"nodeType":"294","messageId":"295","endLine":7,"endColumn":7},{"ruleId":"292","severity":1,"message":"332","line":47,"column":10,"nodeType":"294","messageId":"295","endLine":47,"endColumn":14},{"ruleId":"292","severity":1,"message":"301","line":3,"column":20,"nodeType":"294","messageId":"295","endLine":3,"endColumn":26},{"ruleId":"292","severity":1,"message":"304","line":6,"column":3,"nodeType":"294","messageId":"295","endLine":6,"endColumn":7},{"ruleId":"292","severity":1,"message":"299","line":13,"column":8,"nodeType":"294","messageId":"295","endLine":13,"endColumn":17},{"ruleId":"292","severity":1,"message":"333","line":17,"column":8,"nodeType":"294","messageId":"295","endLine":17,"endColumn":23},{"ruleId":"334","severity":1,"message":"335","line":169,"column":6,"nodeType":"336","endLine":169,"endColumn":8,"suggestions":"337"},{"ruleId":"292","severity":1,"message":"338","line":1,"column":38,"nodeType":"294","messageId":"295","endLine":1,"endColumn":53},{"ruleId":"292","severity":1,"message":"305","line":7,"column":8,"nodeType":"294","messageId":"295","endLine":7,"endColumn":22},{"ruleId":"334","severity":1,"message":"339","line":51,"column":6,"nodeType":"336","endLine":51,"endColumn":13,"suggestions":"340"},{"ruleId":"324","severity":1,"message":"341","line":99,"column":24,"nodeType":"326","messageId":"327","endLine":99,"endColumn":26},{"ruleId":"342","severity":1,"message":"343","line":50,"column":26,"nodeType":"344","messageId":"345","endLine":50,"endColumn":28},{"ruleId":"334","severity":1,"message":"346","line":33,"column":5,"nodeType":"336","endLine":33,"endColumn":11,"suggestions":"347"},{"ruleId":"334","severity":1,"message":"346","line":64,"column":5,"nodeType":"336","endLine":64,"endColumn":11,"suggestions":"348"},{"ruleId":"334","severity":1,"message":"349","line":75,"column":6,"nodeType":"294","endLine":75,"endColumn":10},{"ruleId":"334","severity":1,"message":"350","line":75,"column":6,"nodeType":"294","endLine":75,"endColumn":10,"suggestions":"351"},{"ruleId":"334","severity":1,"message":"352","line":71,"column":6,"nodeType":"336","endLine":71,"endColumn":16,"suggestions":"353"},{"ruleId":"292","severity":1,"message":"301","line":3,"column":20,"nodeType":"294","messageId":"295","endLine":3,"endColumn":26},{"ruleId":"292","severity":1,"message":"302","line":4,"column":3,"nodeType":"294","messageId":"295","endLine":4,"endColumn":9},{"ruleId":"292","severity":1,"message":"303","line":5,"column":3,"nodeType":"294","messageId":"295","endLine":5,"endColumn":8},{"ruleId":"292","severity":1,"message":"304","line":6,"column":3,"nodeType":"294","messageId":"295","endLine":6,"endColumn":7},{"ruleId":"292","severity":1,"message":"354","line":7,"column":3,"nodeType":"294","messageId":"295","endLine":7,"endColumn":11},{"ruleId":"292","severity":1,"message":"355","line":8,"column":3,"nodeType":"294","messageId":"295","endLine":8,"endColumn":16},{"ruleId":"324","severity":1,"message":"341","line":56,"column":27,"nodeType":"326","messageId":"327","endLine":56,"endColumn":29},{"ruleId":"334","severity":1,"message":"356","line":61,"column":6,"nodeType":"336","endLine":61,"endColumn":8,"suggestions":"357"},{"ruleId":"292","severity":1,"message":"301","line":3,"column":20,"nodeType":"294","messageId":"295","endLine":3,"endColumn":26},{"ruleId":"292","severity":1,"message":"302","line":4,"column":3,"nodeType":"294","messageId":"295","endLine":4,"endColumn":9},{"ruleId":"292","severity":1,"message":"303","line":5,"column":3,"nodeType":"294","messageId":"295","endLine":5,"endColumn":8},{"ruleId":"292","severity":1,"message":"304","line":6,"column":3,"nodeType":"294","messageId":"295","endLine":6,"endColumn":7},{"ruleId":"292","severity":1,"message":"354","line":7,"column":3,"nodeType":"294","messageId":"295","endLine":7,"endColumn":11},{"ruleId":"292","severity":1,"message":"355","line":8,"column":3,"nodeType":"294","messageId":"295","endLine":8,"endColumn":16},{"ruleId":"324","severity":1,"message":"341","line":55,"column":27,"nodeType":"326","messageId":"327","endLine":55,"endColumn":29},{"ruleId":"334","severity":1,"message":"356","line":60,"column":6,"nodeType":"336","endLine":60,"endColumn":8,"suggestions":"358"},{"ruleId":"292","severity":1,"message":"301","line":3,"column":20,"nodeType":"294","messageId":"295","endLine":3,"endColumn":26},{"ruleId":"292","severity":1,"message":"302","line":4,"column":3,"nodeType":"294","messageId":"295","endLine":4,"endColumn":9},{"ruleId":"292","severity":1,"message":"303","line":5,"column":3,"nodeType":"294","messageId":"295","endLine":5,"endColumn":8},{"ruleId":"292","severity":1,"message":"304","line":6,"column":3,"nodeType":"294","messageId":"295","endLine":6,"endColumn":7},{"ruleId":"292","severity":1,"message":"354","line":7,"column":3,"nodeType":"294","messageId":"295","endLine":7,"endColumn":11},{"ruleId":"292","severity":1,"message":"359","line":14,"column":10,"nodeType":"294","messageId":"295","endLine":14,"endColumn":16},{"ruleId":"292","severity":1,"message":"360","line":15,"column":8,"nodeType":"294","messageId":"295","endLine":15,"endColumn":13},{"ruleId":"292","severity":1,"message":"361","line":36,"column":7,"nodeType":"294","messageId":"295","endLine":36,"endColumn":12},{"ruleId":"334","severity":1,"message":"356","line":47,"column":6,"nodeType":"336","endLine":47,"endColumn":8,"suggestions":"362"},{"ruleId":"292","severity":1,"message":"301","line":3,"column":20,"nodeType":"294","messageId":"295","endLine":3,"endColumn":26},{"ruleId":"292","severity":1,"message":"302","line":4,"column":3,"nodeType":"294","messageId":"295","endLine":4,"endColumn":9},{"ruleId":"292","severity":1,"message":"303","line":5,"column":3,"nodeType":"294","messageId":"295","endLine":5,"endColumn":8},{"ruleId":"292","severity":1,"message":"304","line":6,"column":3,"nodeType":"294","messageId":"295","endLine":6,"endColumn":7},{"ruleId":"292","severity":1,"message":"354","line":7,"column":3,"nodeType":"294","messageId":"295","endLine":7,"endColumn":11},{"ruleId":"292","severity":1,"message":"355","line":8,"column":3,"nodeType":"294","messageId":"295","endLine":8,"endColumn":16},{"ruleId":"292","severity":1,"message":"360","line":15,"column":8,"nodeType":"294","messageId":"295","endLine":15,"endColumn":13},{"ruleId":"334","severity":1,"message":"356","line":77,"column":6,"nodeType":"336","endLine":77,"endColumn":8,"suggestions":"363"},{"ruleId":"292","severity":1,"message":"301","line":3,"column":20,"nodeType":"294","messageId":"295","endLine":3,"endColumn":26},{"ruleId":"292","severity":1,"message":"302","line":4,"column":3,"nodeType":"294","messageId":"295","endLine":4,"endColumn":9},{"ruleId":"292","severity":1,"message":"303","line":5,"column":3,"nodeType":"294","messageId":"295","endLine":5,"endColumn":8},{"ruleId":"292","severity":1,"message":"304","line":6,"column":3,"nodeType":"294","messageId":"295","endLine":6,"endColumn":7},{"ruleId":"292","severity":1,"message":"354","line":7,"column":3,"nodeType":"294","messageId":"295","endLine":7,"endColumn":11},{"ruleId":"292","severity":1,"message":"355","line":8,"column":3,"nodeType":"294","messageId":"295","endLine":8,"endColumn":16},{"ruleId":"292","severity":1,"message":"333","line":16,"column":8,"nodeType":"294","messageId":"295","endLine":16,"endColumn":23},{"ruleId":"324","severity":1,"message":"341","line":65,"column":27,"nodeType":"326","messageId":"327","endLine":65,"endColumn":29},{"ruleId":"334","severity":1,"message":"356","line":70,"column":6,"nodeType":"336","endLine":70,"endColumn":8,"suggestions":"364"},{"ruleId":"292","severity":1,"message":"293","line":1,"column":28,"nodeType":"294","messageId":"295","endLine":1,"endColumn":36},{"ruleId":"292","severity":1,"message":"301","line":3,"column":20,"nodeType":"294","messageId":"295","endLine":3,"endColumn":26},{"ruleId":"292","severity":1,"message":"302","line":4,"column":3,"nodeType":"294","messageId":"295","endLine":4,"endColumn":9},{"ruleId":"292","severity":1,"message":"303","line":5,"column":3,"nodeType":"294","messageId":"295","endLine":5,"endColumn":8},{"ruleId":"292","severity":1,"message":"304","line":6,"column":3,"nodeType":"294","messageId":"295","endLine":6,"endColumn":7},{"ruleId":"292","severity":1,"message":"354","line":7,"column":3,"nodeType":"294","messageId":"295","endLine":7,"endColumn":11},{"ruleId":"292","severity":1,"message":"355","line":8,"column":3,"nodeType":"294","messageId":"295","endLine":8,"endColumn":16},{"ruleId":"292","severity":1,"message":"359","line":14,"column":10,"nodeType":"294","messageId":"295","endLine":14,"endColumn":16},{"ruleId":"292","severity":1,"message":"360","line":15,"column":8,"nodeType":"294","messageId":"295","endLine":15,"endColumn":13},{"ruleId":"292","severity":1,"message":"333","line":16,"column":8,"nodeType":"294","messageId":"295","endLine":16,"endColumn":23},{"ruleId":"334","severity":1,"message":"356","line":28,"column":6,"nodeType":"336","endLine":28,"endColumn":8,"suggestions":"365"},{"ruleId":"292","severity":1,"message":"301","line":3,"column":20,"nodeType":"294","messageId":"295","endLine":3,"endColumn":26},{"ruleId":"292","severity":1,"message":"302","line":4,"column":3,"nodeType":"294","messageId":"295","endLine":4,"endColumn":9},{"ruleId":"292","severity":1,"message":"303","line":5,"column":3,"nodeType":"294","messageId":"295","endLine":5,"endColumn":8},{"ruleId":"292","severity":1,"message":"304","line":6,"column":3,"nodeType":"294","messageId":"295","endLine":6,"endColumn":7},{"ruleId":"292","severity":1,"message":"354","line":7,"column":3,"nodeType":"294","messageId":"295","endLine":7,"endColumn":11},{"ruleId":"292","severity":1,"message":"355","line":8,"column":3,"nodeType":"294","messageId":"295","endLine":8,"endColumn":16},{"ruleId":"292","severity":1,"message":"360","line":15,"column":8,"nodeType":"294","messageId":"295","endLine":15,"endColumn":13},{"ruleId":"334","severity":1,"message":"356","line":71,"column":6,"nodeType":"336","endLine":71,"endColumn":8,"suggestions":"366"},{"ruleId":"292","severity":1,"message":"293","line":1,"column":28,"nodeType":"294","messageId":"295","endLine":1,"endColumn":36},{"ruleId":"292","severity":1,"message":"301","line":3,"column":20,"nodeType":"294","messageId":"295","endLine":3,"endColumn":26},{"ruleId":"292","severity":1,"message":"302","line":4,"column":3,"nodeType":"294","messageId":"295","endLine":4,"endColumn":9},{"ruleId":"292","severity":1,"message":"303","line":5,"column":3,"nodeType":"294","messageId":"295","endLine":5,"endColumn":8},{"ruleId":"292","severity":1,"message":"304","line":6,"column":3,"nodeType":"294","messageId":"295","endLine":6,"endColumn":7},{"ruleId":"292","severity":1,"message":"354","line":7,"column":3,"nodeType":"294","messageId":"295","endLine":7,"endColumn":11},{"ruleId":"292","severity":1,"message":"355","line":8,"column":3,"nodeType":"294","messageId":"295","endLine":8,"endColumn":16},{"ruleId":"292","severity":1,"message":"359","line":14,"column":10,"nodeType":"294","messageId":"295","endLine":14,"endColumn":16},{"ruleId":"292","severity":1,"message":"360","line":15,"column":8,"nodeType":"294","messageId":"295","endLine":15,"endColumn":13},{"ruleId":"292","severity":1,"message":"333","line":16,"column":8,"nodeType":"294","messageId":"295","endLine":16,"endColumn":23},{"ruleId":"334","severity":1,"message":"356","line":28,"column":6,"nodeType":"336","endLine":28,"endColumn":8,"suggestions":"367"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'FileUploadDemo' is defined but never used.","'FormLayoutDemo' is defined but never used.","'DataTable' is defined but never used.","'TempSave' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'SidebarActions' is defined but never used.","no-native-reassign",["368"],"no-negated-in-lhs",["369"],["368"],["369"],"'ReactDOM' is defined but never used.","'Checkbox' is defined but never used.","'RadioButton' is defined but never used.","'Dropdown' is defined but never used.","'InputTextarea' is defined but never used.","'FileUpload' is defined but never used.","'classNames' is defined but never used.","'Rating' is defined but never used.","'InputNumber' is defined but never used.","'productService' is assigned a value but never used.","'months' is assigned a value but never used.","'processUploadedMeterData' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'editMeter' is assigned a value but never used.","'confirmDeleteSelected' is assigned a value but never used.","'useRef' is defined but never used.","'useLocation' is defined but never used.","'Home' is defined but never used.","'FolderStructure' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'StatusMap', 'history', and 'meterIdParam'. Either include them or remove the dependency array.","ArrayExpression",["370"],"'useLayoutEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'FileTypeMap'. Either include it or remove the dependency array.",["371"],"Expected '===' and instead saw '=='.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook React.useCallback has a missing dependency: 'onNodeClick'. Either include it or remove the dependency array.",["372"],["373"],"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has a missing dependency: 'func'. Either include it or remove the dependency array. If 'func' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["374"],"React Hook useEffect has missing dependencies: 'onCancel' and 'onSubmit'. Either include them or remove the dependency array. If 'onSubmit' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["375"],"'Redirect' is defined but never used.","'useRouteMatch' is defined but never used.","React Hook useEffect has a missing dependency: 'meterIdParam'. Either include it or remove the dependency array.",["376"],["377"],"'Button' is defined but never used.","'axios' is defined but never used.","'match' is assigned a value but never used.",["378"],["379"],["380"],["381"],["382"],["383"],"no-global-assign","no-unsafe-negation",{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"388","fix":"390"},{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"395","fix":"397"},{"desc":"395","fix":"398"},{"desc":"395","fix":"399"},{"desc":"395","fix":"400"},{"desc":"395","fix":"401"},{"desc":"395","fix":"402"},{"desc":"395","fix":"403"},"Update the dependencies array to be: [StatusMap, history, meterIdParam]",{"range":"404","text":"405"},"Update the dependencies array to be: [FileTypeMap, props]",{"range":"406","text":"407"},"Update the dependencies array to be: [node, onNodeClick]",{"range":"408","text":"409"},{"range":"410","text":"409"},"Update the dependencies array to be: [func]",{"range":"411","text":"412"},"Update the dependencies array to be: [inputRef, onCancel, onSubmit]",{"range":"413","text":"414"},"Update the dependencies array to be: [meterIdParam]",{"range":"415","text":"416"},{"range":"417","text":"416"},{"range":"418","text":"416"},{"range":"419","text":"416"},{"range":"420","text":"416"},{"range":"421","text":"416"},{"range":"422","text":"416"},{"range":"423","text":"416"},[5210,5212],"[StatusMap, history, meterIdParam]",[1789,1796],"[FileTypeMap, props]",[1098,1104],"[node, onNodeClick]",[1706,1712],[1774,1778],"[func]",[1830,1840],"[inputRef, onCancel, onSubmit]",[1892,1894],"[meterIdParam]",[1822,1824],[1275,1277],[2422,2424],[2130,2132],[765,767],[2253,2255],[765,767]]
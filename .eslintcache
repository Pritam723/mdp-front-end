[{"E:\\MDP Project\\mdp-front-end\\src\\index.js":"1","E:\\MDP Project\\mdp-front-end\\src\\App.js":"2","E:\\MDP Project\\mdp-front-end\\src\\reportWebVitals.js":"3","D:\\mdp\\mdp-front-end\\src\\index.js":"4","D:\\mdp\\mdp-front-end\\src\\App.js":"5","D:\\mdp\\mdp-front-end\\src\\reportWebVitals.js":"6","D:\\mdp\\mdp-front-end\\src\\FileUpload.js":"7","D:\\mdp\\mdp-front-end\\src\\FormLayoutDemo.js":"8","D:\\mdp\\mdp-front-end\\src\\DataTable.js":"9","D:\\mdp\\mdp-front-end\\src\\ProductService.js":"10","D:\\mdp\\mdp-front-end\\src\\tempSave.js":"11","D:\\mdp\\mdp-front-end\\src\\AppWrapper.js":"12","D:\\mdp\\mdp-front-end\\src\\ParticularMeter.js":"13","D:\\mdp\\mdp-front-end\\src\\FolderStructure.js":"14","D:\\mdp\\mdp-front-end\\src\\Tree\\Tree.js":"15","D:\\mdp\\mdp-front-end\\src\\Tree\\state\\index.js":"16","D:\\mdp\\mdp-front-end\\src\\Tree\\state\\TreeContext.js":"17","D:\\mdp\\mdp-front-end\\src\\Tree\\state\\reducer.js":"18","D:\\mdp\\mdp-front-end\\src\\Tree\\state\\constants.js":"19","D:\\mdp\\mdp-front-end\\src\\Tree\\File\\TreeFile.js":"20","D:\\mdp\\mdp-front-end\\src\\Tree\\Folder\\TreeFolder.js":"21","D:\\mdp\\mdp-front-end\\src\\Tree\\Folder\\TreeFolder.style.js":"22","D:\\mdp\\mdp-front-end\\src\\Tree\\Tree.style.js":"23","D:\\mdp\\mdp-front-end\\src\\utils.js":"24","D:\\mdp\\mdp-front-end\\src\\Tree\\File\\TreeFile.style.js":"25","D:\\mdp\\mdp-front-end\\src\\Tree\\FileIcons.js":"26","D:\\mdp\\mdp-front-end\\src\\Tree\\TreePlaceholderInput.js":"27"},{"size":500,"mtime":499162500000,"results":"28","hashOfConfig":"29"},{"size":528,"mtime":499162500000,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"29"},{"size":443,"mtime":1612768557401,"results":"32","hashOfConfig":"33"},{"size":2334,"mtime":1608281598617,"results":"34","hashOfConfig":"33"},{"size":375,"mtime":1608266237869,"results":"35","hashOfConfig":"33"},{"size":1152,"mtime":1612327939393,"results":"36","hashOfConfig":"33"},{"size":3283,"mtime":1612429338366,"results":"37","hashOfConfig":"33"},{"size":19687,"mtime":1612778761969,"results":"38","hashOfConfig":"33"},{"size":420,"mtime":1612372995111,"results":"39","hashOfConfig":"33"},{"size":16303,"mtime":1612759341022,"results":"40","hashOfConfig":"33"},{"size":1213,"mtime":1612776061773,"results":"41","hashOfConfig":"33"},{"size":3894,"mtime":1613042591839,"results":"42","hashOfConfig":"33"},{"size":6038,"mtime":1613041252143,"results":"43","hashOfConfig":"33"},{"size":1905,"mtime":1613042304060,"results":"44","hashOfConfig":"33"},{"size":95,"mtime":1613041252122,"results":"45","hashOfConfig":"33"},{"size":290,"mtime":1613041252120,"results":"46","hashOfConfig":"33"},{"size":1332,"mtime":1613042245192,"results":"47","hashOfConfig":"33"},{"size":254,"mtime":1613041252121,"results":"48","hashOfConfig":"33"},{"size":2013,"mtime":1613042533178,"results":"49","hashOfConfig":"33"},{"size":3478,"mtime":1613042515438,"results":"50","hashOfConfig":"33"},{"size":225,"mtime":1613041252115,"results":"51","hashOfConfig":"33"},{"size":1421,"mtime":1613041252117,"results":"52","hashOfConfig":"33"},{"size":1937,"mtime":1613041252168,"results":"53","hashOfConfig":"33"},{"size":216,"mtime":1613041252111,"results":"54","hashOfConfig":"33"},{"size":257,"mtime":1613041252112,"results":"55","hashOfConfig":"33"},{"size":2206,"mtime":1613042490210,"results":"56","hashOfConfig":"33"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s04f4x",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},"ylgylm",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\MDP Project\\mdp-front-end\\src\\index.js",[],"E:\\MDP Project\\mdp-front-end\\src\\App.js",[],"E:\\MDP Project\\mdp-front-end\\src\\reportWebVitals.js",[],"D:\\mdp\\mdp-front-end\\src\\index.js",["119","120","121","122","123","124","125","126","127","128"],"import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport FileUploadDemo from \"./FileUpload\";\r\nimport FormLayoutDemo from \"./FormLayoutDemo\";\r\nimport AppWrapper from \"./AppWrapper\";\r\nimport DataTable from \"./DataTable\";\r\nimport TempSave from \"./tempSave\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nReactDOM.render(<AppWrapper />, document.getElementById(\"root\"));\r\n",["129","130"],"D:\\mdp\\mdp-front-end\\src\\App.js",[],"D:\\mdp\\mdp-front-end\\src\\reportWebVitals.js",[],["131","132"],"D:\\mdp\\mdp-front-end\\src\\FileUpload.js",["133"],"import 'primeicons/primeicons.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\nimport 'primereact/resources/primereact.css';\r\nimport 'primeflex/primeflex.css';\r\nimport './cssFiles/fileUpload.css';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport React, { useRef } from 'react';\r\nimport { Toast } from 'primereact/toast';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nexport default function FileUploadDemo() {\r\n    const toast = useRef(null);\r\n\r\n    const onUpload = () => {\r\n        toast.current.show({severity: 'info', summary: 'Success', detail: 'File Uploaded'});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast}></Toast>\r\n\r\n            <div className=\"card\">\r\n                <h5>Advanced</h5>\r\n                <FileUpload name=\"demo[]\" url=\"./upload.php\" onUpload={onUpload} multiple accept=\"image/*\" maxFileSize={1000000}\r\n                    emptyTemplate={<p className=\"p-m-0\">Drag and drop files to here to upload.</p>} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n                \r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<FileUploadDemo />, rootElement);\r\n","D:\\mdp\\mdp-front-end\\src\\FormLayoutDemo.js",["134","135","136","137","138","139"],"import \"primeicons/primeicons.css\";\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\nimport \"primereact/resources/primereact.css\";\r\nimport \"primeflex/primeflex.css\";\r\nimport \"./cssFiles/FormLayoutDemo.css\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport React, { useState, useRef } from \"react\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\nimport { Checkbox } from \"primereact/checkbox\";\r\nimport { RadioButton } from \"primereact/radiobutton\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { InputTextarea } from \"primereact/inputtextarea\";\r\nimport { Toast } from \"primereact/toast\";\r\nimport { FileUpload } from \"primereact/fileupload\";\r\n\r\nexport default function FormLayoutDemo() {\r\n  const [year, setYear] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n\r\n  const [meterZippedFile, setMeterZippedFile] = useState();\r\n\r\n  const newBook = () => {\r\n    console.log(\"works\");\r\n    console.log(meterZippedFile);\r\n    console.log(meterZippedFile.name);\r\n    const uploadData = new FormData();\r\n    uploadData.append(\"year\", year);\r\n    uploadData.append(\"month\", month);\r\n    uploadData.append(\"meterZippedFile\", meterZippedFile, meterZippedFile.name);\r\n    // var csrftoken = getCookie(\"csrftoken\");\r\n    console.log(uploadData);\r\n    // fetch(\"http://127.0.0.1:8000/fmmdp/addNewMeterFile/\", {\r\n    //   method: \"POST\",\r\n    //   body: uploadData,\r\n    // })\r\n    //   .then((res) => console.log(res))\r\n    //   .catch((error) => console.log(error));\r\n  };\r\n\r\n  const toast = useRef(null);\r\n\r\n  return (\r\n    <div>\r\n      <Toast ref={toast}></Toast>\r\n\r\n      <h5>Add meter cumulative data</h5>\r\n      <div className=\"p-formgroup-inline\">\r\n        <div className=\"p-field\">\r\n          <label className=\"p-sr-only\">Year</label>\r\n          <InputText\r\n            type=\"text\"\r\n            value={year}\r\n            placeholder=\"Year\"\r\n            onChange={(evt) => setYear(evt.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"p-field\">\r\n          <label className=\"p-sr-only\">Month</label>\r\n          <InputText\r\n            type=\"text\"\r\n            value={month}\r\n            placeholder=\"Month\"\r\n            onChange={(evt) => setMonth(evt.target.value)}\r\n          />\r\n        </div>\r\n        {/* <div className=\"p-field\">\r\n          <FileUpload\r\n            // name=\"demo[]\"\r\n            // url=\"./upload.php\"\r\n            // onUpload={onUpload}\r\n            // multiple\r\n            // accept=\"image/*\"\r\n            // maxFileSize={1000000}\r\n            emptyTemplate={\r\n              <p className=\"p-m-0\">Drag and drop files to here to upload.</p>\r\n            }\r\n            type=\"file\"\r\n            onChange={(evt) => setMeterZippedFile(evt.target.files[0])}\r\n          />\r\n        </div> */}\r\n        <div className=\"p-field\">\r\n          <label>\r\n            Meter Zip File\r\n            <input\r\n              type=\"file\"\r\n              onChange={(evt) => setMeterZippedFile(evt.target.files[0])}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <Button type=\"button\" label=\"Submit\" onClick={() => newBook()} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<FormLayoutDemo />, rootElement);\r\n","D:\\mdp\\mdp-front-end\\src\\DataTable.js",["140","141","142","143","144","145","146","147","148","149","150","151","152","153","154"],"import \"primeicons/primeicons.css\";\r\nimport \"primereact/resources/themes/saga-blue/theme.css\";\r\nimport \"primereact/resources/primereact.css\";\r\nimport \"primeflex/primeflex.css\";\r\nimport \"./cssFiles/DataTableDemo.css\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Tag } from \"primereact/tag\";\r\nimport axios from \"axios\";\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport ProductService from \"./ProductService\";\r\nimport { Toast } from \"primereact/toast\";\r\nimport { Button } from \"primereact/button\";\r\nimport { FileUpload } from \"primereact/fileupload\";\r\nimport { Rating } from \"primereact/rating\";\r\nimport { Toolbar } from \"primereact/toolbar\";\r\nimport { InputTextarea } from \"primereact/inputtextarea\";\r\nimport { RadioButton } from \"primereact/radiobutton\";\r\nimport { InputNumber } from \"primereact/inputnumber\";\r\nimport { Dialog } from \"primereact/dialog\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// import \"./DataTableDemo.css\";\r\n\r\nexport default function DataTableCrudDemo() {\r\n  let emptyMeter = {\r\n    model: \"fifteenmmdp.allmeterfiles\",\r\n    pk: null,\r\n    fields: { year: \"\", month: \"\", zippedMeterFile: null },\r\n  };\r\n\r\n  // const [meterZippedFile, setMeterZippedFile] = useState();\r\n\r\n  //////////////////////////////////// my own ///////////////////////////////////\r\n\r\n  // const [year, setYear] = useState(\"\");\r\n  // const [month, setMonth] = useState(\"\");\r\n  const [meters, setMeters] = useState(null);\r\n  const [meter, setMeter] = useState(emptyMeter);\r\n  const [meterDialog, setMeterDialog] = useState(false);\r\n  const [selectedMeters, setSelectedMeters] = useState(null);\r\n  const [deleteMeterDialog, setDeleteMeterDialog] = useState(false);\r\n  const [deleteMetersDialog, setDeleteMetersDialog] = useState(false);\r\n\r\n  //////////////////////////////////////////////////////////////////////////////\r\n\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [globalFilter, setGlobalFilter] = useState(null);\r\n  const toast = useRef(null);\r\n  const dt = useRef(null);\r\n  const productService = new ProductService();\r\n  let history = useHistory();\r\n  useEffect(() => {\r\n    fetch(\"http://127.0.0.1:8000/fmmdp/getAllMeterData/\")\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        setMeters(result);\r\n        console.log(result);\r\n      });\r\n  }, []);\r\n\r\n  const months = [\r\n    { month: \"January\", value: \"January\" },\r\n    { month: \"February\", value: \"February\" },\r\n    { month: \"March\", value: \"March\" },\r\n    { month: \"April\", value: \"April\" },\r\n    { month: \"May\", value: \"May\" },\r\n  ];\r\n\r\n  const openNew = () => {\r\n    setMeter(emptyMeter);\r\n    setSubmitted(false);\r\n    setMeterDialog(true);\r\n  };\r\n\r\n  const hideDialog = () => {\r\n    setSubmitted(false);\r\n    setMeterDialog(false);\r\n  };\r\n\r\n  const hideDeleteMeterDialog = () => {\r\n    setDeleteMeterDialog(false);\r\n  };\r\n\r\n  const hideDeleteMetersDialog = () => {\r\n    setDeleteMetersDialog(false);\r\n  };\r\n  const processMeterData = (id) => {\r\n    axios\r\n      .post(\"http://127.0.0.1:8000/fmmdp/unzipMeterData/\" + id)\r\n      .then((response) => {\r\n        setMeter(emptyMeter);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const workWithMeterData = (rowData) => {\r\n    return (\r\n      <Button\r\n        label=\"Work with Meter Data\"\r\n        className=\"p-button-rounded p-button-secondary\"\r\n        onClick={() => history.push(\"/meterFile/\" + rowData.pk)}\r\n      />\r\n    );\r\n  };\r\n  const processUploadedMeterData = (rowData) => {\r\n    return (\r\n      <Button\r\n        label=\"Extract/Merge/Verify/DateFilter\"\r\n        className=\"p-button-rounded p-button-secondary\"\r\n        onClick={() => processMeterData(rowData.pk)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const downloadTemplate = (rowData) => {\r\n    return (\r\n      <>\r\n        <a\r\n          href={\r\n            \"http://127.0.0.1:8000/fmmdp/media/\" +\r\n            rowData.fields.zippedMeterFile\r\n          }\r\n          download={\r\n            \"http://127.0.0.1:8000/fmmdp/media/\" +\r\n            rowData.fields.zippedMeterFile\r\n          }\r\n        >\r\n          {rowData.fields.zippedMeterFile\r\n            ? rowData.fields.zippedMeterFile.split(\"/\").slice(-1).pop()\r\n            : null}\r\n        </a>\r\n        <br />\r\n        <br />\r\n        <TagDemo />\r\n      </>\r\n    );\r\n  };\r\n  // const newBook = () => {\r\n  //   console.log(\"works\");\r\n  //   const uploadData = new FormData();\r\n  //   uploadData.append(\"year\", meter.fields.year);\r\n  //   uploadData.append(\"month\", meter.fields.month);\r\n  //   uploadData.append(\r\n  //     \"meterZippedFile\",\r\n  //     meter.fields.zippedMeterFile,\r\n  //     meter.fields.zippedMeterFile.name\r\n  //   );\r\n  //   console.log(uploadData);\r\n\r\n  //   axios\r\n  //     .post(\"http://127.0.0.1:8000/fmmdp/addNewMeterFile/\", uploadData)\r\n  //     .then((response) => {\r\n  //       console.log(response);\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.log(error);\r\n  //     });\r\n  // };\r\n\r\n  const saveMeter = () => {\r\n    setSubmitted(true);\r\n\r\n    if (\r\n      meter.fields.year.trim() != \"\" &&\r\n      meter.fields.month.trim() != \"\" &&\r\n      meter.fields.zippedMeterFile\r\n    ) {\r\n      let _meters = [...meters]; // Fetching already existing meters. Because we will use it for both edit & creation\r\n      let _meter = { ...meter };\r\n      if (meter.pk) {\r\n        const uploadData = new FormData();\r\n        uploadData.append(\"year\", meter.fields.year);\r\n        uploadData.append(\"month\", meter.fields.month);\r\n        uploadData.append(\r\n          \"meterZippedFile\",\r\n          meter.fields.zippedMeterFile,\r\n          meter.fields.zippedMeterFile.name\r\n        );\r\n        console.log(uploadData);\r\n        axios\r\n          .post(\r\n            \"http://127.0.0.1:8000/fmmdp/editNewMeterFile/\" + meter.pk,\r\n            uploadData\r\n          )\r\n          .then((response) => {\r\n            const index = findIndexById(meter.pk);\r\n\r\n            _meters[index] = _meter;\r\n            toast.current.show({\r\n              severity: \"success\",\r\n              summary: \"Successful\",\r\n              detail: \"Meter data updated\",\r\n              life: 3000,\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      } else {\r\n        const uploadData = new FormData();\r\n        uploadData.append(\"year\", meter.fields.year);\r\n        uploadData.append(\"month\", meter.fields.month);\r\n        uploadData.append(\r\n          \"meterZippedFile\",\r\n          meter.fields.zippedMeterFile,\r\n          meter.fields.zippedMeterFile.name\r\n        );\r\n        console.log(uploadData);\r\n        axios\r\n          .post(\"http://127.0.0.1:8000/fmmdp/addNewMeterFile/\", uploadData)\r\n          .then((response) => {\r\n            console.log(response);\r\n            _meter.pk = response.data.id;\r\n            _meters.push(_meter);\r\n            toast.current.show({\r\n              severity: \"success\",\r\n              summary: \"Successful\",\r\n              detail: \"Meter data added\",\r\n              life: 3000,\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      }\r\n\r\n      setMeters(_meters);\r\n      setMeterDialog(false);\r\n      setMeter(emptyMeter);\r\n    }\r\n  };\r\n\r\n  const editMeter = (meter) => {\r\n    setMeter({ ...meter }); // meter object spread\r\n    setMeterDialog(true);\r\n  };\r\n\r\n  //   const editProduct = (product) => {\r\n  //     setProduct({ ...product }); // product object spread\r\n  //     setProductDialog(true);\r\n  //   };\r\n  const confirmDeleteMeter = (meter) => {\r\n    setMeter(meter);\r\n    setDeleteMeterDialog(true);\r\n  };\r\n\r\n  const deleteProduct = () => {\r\n    fetch(\"http://127.0.0.1:8000/fmmdp/deleteNewMeterFile/\" + meter.pk)\r\n      .then((res) => {\r\n        console.log(res);\r\n        let _meters = meters.filter((val) => val.pk !== meter.pk);\r\n        setMeters(_meters);\r\n        setDeleteMeterDialog(false);\r\n        setMeter(emptyMeter);\r\n        toast.current.show({\r\n          severity: \"success\",\r\n          summary: \"Successful\",\r\n          detail: \"Product Deleted\",\r\n          life: 3000,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast.current.show({\r\n          severity: \"danger\",\r\n          summary: \"Unsuccessful\",\r\n          detail: \"Some error occured\",\r\n          life: 3000,\r\n        });\r\n      });\r\n  };\r\n\r\n  const findIndexById = (id) => {\r\n    let index = -1;\r\n    for (let i = 0; i < meters.length; i++) {\r\n      if (meters[i].pk === id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return index;\r\n  };\r\n\r\n  const confirmDeleteSelected = () => {\r\n    setDeleteMetersDialog(true);\r\n  };\r\n\r\n  const deleteSelectedProducts = () => {\r\n    let _meters = meters.filter((val) => !selectedMeters.includes(val));\r\n    setMeters(_meters);\r\n    setDeleteMetersDialog(false);\r\n    setSelectedMeters(null);\r\n    toast.current.show({\r\n      severity: \"success\",\r\n      summary: \"Successful\",\r\n      detail: \"Products Deleted\",\r\n      life: 3000,\r\n    });\r\n  };\r\n\r\n  const onInputChange = (e, name) => {\r\n    const val = (e.target && e.target.value) || \"\";\r\n    let _meter = { ...meter };\r\n    _meter[\"fields\"][`${name}`] = val;\r\n\r\n    setMeter(_meter);\r\n  };\r\n\r\n  const onFileChange = (e, name) => {\r\n    console.log(\"fine\");\r\n    // const val = e.value || 0;\r\n    let _meter = { ...meter };\r\n    // _meter[`${name}`] = val;\r\n    _meter.fields.zippedMeterFile = e.target.files[0];\r\n\r\n    setMeter(_meter);\r\n  };\r\n  const leftToolbarTemplate = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <Button\r\n          label=\"New\"\r\n          icon=\"pi pi-plus\"\r\n          className=\"p-button-success p-mr-2\"\r\n          onClick={openNew}\r\n        />\r\n        {/* <Button\r\n          label=\"Delete\"\r\n          icon=\"pi pi-trash\"\r\n          className=\"p-button-danger\"\r\n          onClick={confirmDeleteSelected}\r\n          disabled={!selectedMeters || !selectedMeters.length}\r\n        /> */}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const TagDemo = () => {\r\n    return (\r\n      <div>\r\n        <div className=\"card\">\r\n          <Tag\r\n            className=\"p-mr-2\"\r\n            severity=\"success\"\r\n            value=\"Not processed yet\"\r\n          ></Tag>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const actionBodyTemplate = (rowData) => {\r\n    return (\r\n      <React.Fragment>\r\n        {/* <Button\r\n          icon=\"pi pi-pencil\"\r\n          className=\"p-button-rounded p-button-success p-mr-2\"\r\n          onClick={() => {\r\n            console.log(rowData);\r\n            editMeter(rowData);\r\n          }}\r\n        /> */}\r\n        <Button\r\n          icon=\"pi pi-trash\"\r\n          className=\"p-button-rounded p-button-warning\"\r\n          onClick={() => confirmDeleteMeter(rowData)}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const header = (\r\n    <div className=\"table-header\">\r\n      <h5 className=\"p-m-0\">Manage Meter Files</h5>\r\n      <span className=\"p-input-icon-left\">\r\n        <i className=\"pi pi-search\" />\r\n        <InputText\r\n          type=\"search\"\r\n          onInput={(e) => setGlobalFilter(e.target.value)}\r\n          placeholder=\"Search...\"\r\n        />\r\n      </span>\r\n    </div>\r\n  );\r\n  const meterDialogFooter = (\r\n    <React.Fragment>\r\n      <Button\r\n        label=\"Discard Changes\"\r\n        icon=\"pi pi-times\"\r\n        className=\"p-button-text\"\r\n        onClick={hideDialog}\r\n      />\r\n      <Button\r\n        label=\"Save Meter Data\"\r\n        icon=\"pi pi-check\"\r\n        className=\"p-button-text\"\r\n        onClick={() => saveMeter()}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n  const deleteMeterDialogFooter = (\r\n    <React.Fragment>\r\n      <Button\r\n        label=\"No\"\r\n        icon=\"pi pi-times\"\r\n        className=\"p-button-text\"\r\n        onClick={hideDeleteMeterDialog}\r\n      />\r\n      <Button\r\n        label=\"Yes\"\r\n        icon=\"pi pi-check\"\r\n        className=\"p-button-text\"\r\n        onClick={deleteProduct}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n  const deleteMetersDialogFooter = (\r\n    <React.Fragment>\r\n      <Button\r\n        label=\"No\"\r\n        icon=\"pi pi-times\"\r\n        className=\"p-button-text\"\r\n        onClick={hideDeleteMetersDialog}\r\n      />\r\n      <Button\r\n        label=\"Yes\"\r\n        icon=\"pi pi-check\"\r\n        className=\"p-button-text\"\r\n        onClick={deleteSelectedProducts}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <div className=\"datatable-crud-demo\">\r\n      <Toast ref={toast} />\r\n\r\n      <div className=\"card\">\r\n        <Toolbar\r\n          className=\"p-mb-4\"\r\n          left={leftToolbarTemplate}\r\n          //   right={rightToolbarTemplate}\r\n        ></Toolbar>\r\n\r\n        <DataTable\r\n          ref={dt}\r\n          value={meters}\r\n          selection={selectedMeters}\r\n          onSelectionChange={(e) => setSelectedMeters(e.value)}\r\n          dataKey=\"pk\"\r\n          paginator\r\n          rows={10}\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n          currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} Meter Data\"\r\n          globalFilter={globalFilter}\r\n          header={header}\r\n        >\r\n          {/* <Column\r\n            selectionMode=\"multiple\"\r\n            headerStyle={{ width: \"3rem\" }}\r\n          ></Column> */}\r\n          <Column field=\"fields.year\" header=\"Year\" sortable></Column>\r\n          <Column field=\"fields.month\" header=\"Month\" sortable></Column>\r\n          <Column body={downloadTemplate} header=\"All meter Zip file\"></Column>\r\n\r\n          {/* <Column\r\n            field=\"inventoryStatus\"\r\n            header=\"Status\"\r\n            body={TagDemo}\r\n            sortable\r\n          ></Column> */}\r\n\r\n          <Column\r\n            field=\"inventoryStatus\"\r\n            header=\"Process\"\r\n            body={workWithMeterData}\r\n            sortable\r\n          ></Column>\r\n          {/* <Column\r\n            field=\"inventoryStatus\"\r\n            header=\"Process\"\r\n            body={processUploadedMeterData}\r\n            sortable\r\n          ></Column> */}\r\n\r\n          <Column header=\"Delete Meter Data\" body={actionBodyTemplate}></Column>\r\n        </DataTable>\r\n      </div>\r\n\r\n      <Dialog\r\n        visible={meterDialog}\r\n        style={{ width: \"450px\" }}\r\n        header=\"Add Meter Data\"\r\n        modal\r\n        className=\"p-fluid\"\r\n        footer={meterDialogFooter}\r\n        onHide={hideDialog} // The cross button at right\r\n      >\r\n        <div className=\"p-field\">\r\n          <label htmlFor=\"year\" className=\"p-sr-only\">\r\n            Year\r\n          </label>\r\n          <InputText\r\n            id=\"year\"\r\n            type=\"text\"\r\n            placeholder=\"Year\"\r\n            defaultValue={meter.fields.year}\r\n            onChange={(e) => onInputChange(e, \"year\")}\r\n            required\r\n            // rows={5}\r\n            // cols={10}\r\n            // defaultValue={meter.fields.year}\r\n          />\r\n          {submitted && !meter.fields.year && (\r\n            <small className=\"p-error\">Year is required.</small>\r\n          )}\r\n        </div>\r\n        {/* ////////////////////////////////////////////// */}\r\n        {/* <div className=\"p-field\">\r\n          <label htmlFor=\"month\" className=\"p-sr-only\">\r\n            Month\r\n          </label>\r\n          <Dropdown\r\n            contentStyle={{ overflow: \"visible\" }}\r\n            id=\"month\"\r\n            // appendTo=\"body\"\r\n            // defaultValue={meter.fields.month}\r\n            // value={meter.fields.month}\r\n            options={months}\r\n            onChange={(e) => onInputChange(e, \"month\")}\r\n            optionLabel=\"month\"\r\n            placeholder=\"Month\"\r\n          />\r\n          {submitted && !meter.fields.month && (\r\n            <small className=\"p-error\">Month is required.</small>\r\n          )}\r\n        </div> */}\r\n\r\n        {/* ///////////////////////////////////////////// */}\r\n\r\n        <div className=\"p-field\">\r\n          <label htmlFor=\"month\" className=\"p-sr-only\">\r\n            Month\r\n          </label>\r\n          <InputText\r\n            id=\"month\"\r\n            type=\"text\"\r\n            placeholder=\"Month\"\r\n            defaultValue={meter.fields.month}\r\n            onChange={(e) => onInputChange(e, \"month\")}\r\n            required\r\n          />\r\n          {submitted && !meter.fields.month && (\r\n            <small className=\"p-error\">Month is required.</small>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"p-field\">\r\n          <label htmlFor=\"zippedMeterFile\" className=\"p-sr-only\">\r\n            Meter Zip File{\" \"}\r\n          </label>\r\n          <input\r\n            id=\"zippedMeterFile\"\r\n            type=\"file\"\r\n            onChange={(e) => onFileChange(e, \"zippedMeterFile\")}\r\n            required\r\n            // rows={5}\r\n            // cols={10}\r\n            // defaultValue={meter.fields.year}\r\n          />\r\n          {submitted && !meter.fields.zippedMeterFile && (\r\n            <small className=\"p-error\">File is required.</small>\r\n          )}\r\n        </div>\r\n        {/* // onChange={(evt) => setMeterZippedFile(evt.target.files[0])} */}\r\n\r\n        {/* <div className=\"p-field\">\r\n          <label className=\"p-sr-only\">Year</label>\r\n\r\n          <InputText\r\n            type=\"text\"\r\n            defaultValue={meter.fields.year}\r\n            placeholder=\"Year\"\r\n            onChange={(evt) => setYear(evt.target.value)}\r\n          />\r\n          {submitted && !meter.name && (\r\n            <small className=\"p-error\">Name is required.</small>\r\n          )}\r\n        </div> */}\r\n\r\n        {/* <div className=\"p-field\">\r\n          <label className=\"p-sr-only\">Month</label>\r\n          <InputText\r\n            type=\"text\"\r\n            defaultValue={meter.fields.month}\r\n            placeholder=\"Month\"\r\n            onChange={(evt) => setMonth(evt.target.value)}\r\n          />\r\n        </div> */}\r\n\r\n        {/* <div className=\"p-field\">\r\n          <label className=\"p-sr-only\">Meter Zip File </label>\r\n\r\n          <input\r\n            type=\"file\"\r\n            // defaultValue=\"fff\"\r\n            onChange={(evt) => setMeterZippedFile(evt.target.files[0])}\r\n          />\r\n        </div> */}\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        visible={deleteMeterDialog}\r\n        style={{ width: \"450px\" }}\r\n        header=\"Confirm\"\r\n        modal\r\n        footer={deleteMeterDialogFooter}\r\n        onHide={hideDeleteMeterDialog}\r\n      >\r\n        <div className=\"confirmation-content\">\r\n          <i\r\n            className=\"pi pi-exclamation-triangle p-mr-3\"\r\n            style={{ fontSize: \"2rem\" }}\r\n          />\r\n          {meter && (\r\n            <span>\r\n              Are you sure you want to delete{\" \"}\r\n              <b>{meter.fields.zippedMeterFile}</b>?\r\n            </span>\r\n          )}\r\n        </div>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        visible={deleteMetersDialog}\r\n        style={{ width: \"450px\" }}\r\n        header=\"Confirm\"\r\n        modal\r\n        footer={deleteMetersDialogFooter}\r\n        onHide={hideDeleteMetersDialog}\r\n      >\r\n        <div className=\"confirmation-content\">\r\n          <i\r\n            className=\"pi pi-exclamation-triangle p-mr-3\"\r\n            style={{ fontSize: \"2rem\" }}\r\n          />\r\n          {meter && (\r\n            <span>\r\n              Are you sure you want to delete the selected Meter Data?\r\n            </span>\r\n          )}\r\n        </div>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<DataTableCrudDemo />, rootElement);\r\n","D:\\mdp\\mdp-front-end\\src\\ProductService.js",[],"D:\\mdp\\mdp-front-end\\src\\tempSave.js",[],"D:\\mdp\\mdp-front-end\\src\\AppWrapper.js",["155","156","157","158","159","160"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useLocation,\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n} from \"react-router-dom\";\r\nimport DataTable from \"./DataTable\";\r\nimport ParticularMeter from \"./ParticularMeter\";\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        {/* <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/about\">About</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/users\">Users</Link>\r\n            </li>\r\n          </ul>\r\n        </nav> */}\r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path=\"/about\">\r\n            <About />\r\n          </Route>\r\n          <Route path=\"/meterFile/:meterIdParam\">\r\n            <ParticularMeter />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <DataTable />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n  return <h2>Home</h2>;\r\n}\r\n\r\nfunction About() {\r\n  return <h2>About</h2>;\r\n}\r\n","D:\\mdp\\mdp-front-end\\src\\ParticularMeter.js",["161","162","163","164","165","166","167"],"D:\\mdp\\mdp-front-end\\src\\FolderStructure.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\Tree.js",["168"],"D:\\mdp\\mdp-front-end\\src\\Tree\\state\\index.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\state\\TreeContext.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\state\\reducer.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\state\\constants.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\File\\TreeFile.js",["169"],"D:\\mdp\\mdp-front-end\\src\\Tree\\Folder\\TreeFolder.js",["170"],"D:\\mdp\\mdp-front-end\\src\\Tree\\Folder\\TreeFolder.style.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\Tree.style.js",[],"D:\\mdp\\mdp-front-end\\src\\utils.js",["171","172"],"import { useRef, useEffect } from \"react\";\r\n\r\n// @deprecated\r\nexport const findNodeById = (nodes, id) => {\r\n  let final;\r\n\r\n  function findNode(nodes, id) {\r\n    nodes.forEach((n) => {\r\n      if (n.id === id) {\r\n        final = n;\r\n        return;\r\n      }\r\n      if (n.files) findNode(n.files, id);\r\n    });\r\n  }\r\n\r\n  findNode(nodes, id);\r\n\r\n  return final;\r\n};\r\n\r\nexport const searchDFS = ({ data, cond, childPathKey = \"files\" }) => {\r\n  let final = null;\r\n  let parentPath = [];\r\n  let parent = null;\r\n  let next = null;\r\n  let prev = null;\r\n\r\n  const recursiveFind = (tree) => {\r\n    tree.forEach((item, index) => {\r\n      if (cond(item, index)) {\r\n        final = item;\r\n\r\n        if (parentPath) {\r\n          parentPath.forEach((p) => {\r\n            // check if parent has the `current item`\r\n            if (p && p[childPathKey].includes(item)) {\r\n              parent = p;\r\n              // set next & previous indexes\r\n              next = p[childPathKey][index + 1];\r\n              prev = p[childPathKey][index - 1];\r\n            } else {\r\n              parent = tree;\r\n              // if parent is null then check the root of the tree\r\n              next = tree[index + 1];\r\n              prev = tree[index - 1];\r\n            }\r\n          });\r\n        }\r\n        return;\r\n      }\r\n      if (item[childPathKey]) {\r\n        // push parent stack\r\n        parentPath.push(item);\r\n        recursiveFind(item[childPathKey]);\r\n      }\r\n    });\r\n  };\r\n\r\n  recursiveFind(data);\r\n  return {\r\n    parent,\r\n    item: final,\r\n    nextSibling: next,\r\n    previousSibling: prev,\r\n  };\r\n};\r\n\r\nexport const useDidMountEffect = (func, deps) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) func();\r\n    else didMount.current = true;\r\n  }, deps);\r\n};\r\n\r\nexport const createFile = ({ name }) => ({ name, type: \"file\" });\r\nexport const createFolder = ({ name }) => ({ name, type: \"folder\", files: [] });\r\n","D:\\mdp\\mdp-front-end\\src\\Tree\\File\\TreeFile.style.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\FileIcons.js",[],"D:\\mdp\\mdp-front-end\\src\\Tree\\TreePlaceholderInput.js",["173"],{"ruleId":"174","severity":1,"message":"175","line":1,"column":17,"nodeType":"176","messageId":"177","endLine":1,"endColumn":25},{"ruleId":"174","severity":1,"message":"178","line":1,"column":27,"nodeType":"176","messageId":"177","endLine":1,"endColumn":36},{"ruleId":"174","severity":1,"message":"179","line":3,"column":8,"nodeType":"176","messageId":"177","endLine":3,"endColumn":22},{"ruleId":"174","severity":1,"message":"180","line":4,"column":8,"nodeType":"176","messageId":"177","endLine":4,"endColumn":22},{"ruleId":"174","severity":1,"message":"181","line":6,"column":8,"nodeType":"176","messageId":"177","endLine":6,"endColumn":17},{"ruleId":"174","severity":1,"message":"182","line":7,"column":8,"nodeType":"176","messageId":"177","endLine":7,"endColumn":16},{"ruleId":"174","severity":1,"message":"183","line":8,"column":27,"nodeType":"176","messageId":"177","endLine":8,"endColumn":33},{"ruleId":"174","severity":1,"message":"184","line":8,"column":35,"nodeType":"176","messageId":"177","endLine":8,"endColumn":41},{"ruleId":"174","severity":1,"message":"185","line":8,"column":43,"nodeType":"176","messageId":"177","endLine":8,"endColumn":48},{"ruleId":"174","severity":1,"message":"186","line":8,"column":50,"nodeType":"176","messageId":"177","endLine":8,"endColumn":54},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"187","replacedBy":"191"},{"ruleId":"189","replacedBy":"192"},{"ruleId":"174","severity":1,"message":"193","line":6,"column":8,"nodeType":"176","messageId":"177","endLine":6,"endColumn":16},{"ruleId":"174","severity":1,"message":"193","line":6,"column":8,"nodeType":"176","messageId":"177","endLine":6,"endColumn":16},{"ruleId":"174","severity":1,"message":"194","line":11,"column":10,"nodeType":"176","messageId":"177","endLine":11,"endColumn":18},{"ruleId":"174","severity":1,"message":"195","line":12,"column":10,"nodeType":"176","messageId":"177","endLine":12,"endColumn":21},{"ruleId":"174","severity":1,"message":"196","line":13,"column":10,"nodeType":"176","messageId":"177","endLine":13,"endColumn":18},{"ruleId":"174","severity":1,"message":"197","line":14,"column":10,"nodeType":"176","messageId":"177","endLine":14,"endColumn":23},{"ruleId":"174","severity":1,"message":"198","line":16,"column":10,"nodeType":"176","messageId":"177","endLine":16,"endColumn":20},{"ruleId":"174","severity":1,"message":"193","line":6,"column":8,"nodeType":"176","messageId":"177","endLine":6,"endColumn":16},{"ruleId":"174","severity":1,"message":"199","line":11,"column":8,"nodeType":"176","messageId":"177","endLine":11,"endColumn":18},{"ruleId":"174","severity":1,"message":"198","line":17,"column":10,"nodeType":"176","messageId":"177","endLine":17,"endColumn":20},{"ruleId":"174","severity":1,"message":"200","line":18,"column":10,"nodeType":"176","messageId":"177","endLine":18,"endColumn":16},{"ruleId":"174","severity":1,"message":"197","line":20,"column":10,"nodeType":"176","messageId":"177","endLine":20,"endColumn":23},{"ruleId":"174","severity":1,"message":"195","line":21,"column":10,"nodeType":"176","messageId":"177","endLine":21,"endColumn":21},{"ruleId":"174","severity":1,"message":"201","line":22,"column":10,"nodeType":"176","messageId":"177","endLine":22,"endColumn":21},{"ruleId":"174","severity":1,"message":"196","line":25,"column":10,"nodeType":"176","messageId":"177","endLine":25,"endColumn":18},{"ruleId":"174","severity":1,"message":"202","line":56,"column":9,"nodeType":"176","messageId":"177","endLine":56,"endColumn":23},{"ruleId":"174","severity":1,"message":"203","line":67,"column":9,"nodeType":"176","messageId":"177","endLine":67,"endColumn":15},{"ruleId":"174","severity":1,"message":"204","line":113,"column":9,"nodeType":"176","messageId":"177","endLine":113,"endColumn":33},{"ruleId":"205","severity":1,"message":"206","line":172,"column":32,"nodeType":"207","messageId":"208","endLine":172,"endColumn":34},{"ruleId":"205","severity":1,"message":"206","line":173,"column":33,"nodeType":"207","messageId":"208","endLine":173,"endColumn":35},{"ruleId":"174","severity":1,"message":"209","line":241,"column":9,"nodeType":"176","messageId":"177","endLine":241,"endColumn":18},{"ruleId":"174","severity":1,"message":"210","line":293,"column":9,"nodeType":"176","messageId":"177","endLine":293,"endColumn":30},{"ruleId":"174","severity":1,"message":"175","line":1,"column":17,"nodeType":"176","messageId":"177","endLine":1,"endColumn":25},{"ruleId":"174","severity":1,"message":"178","line":1,"column":27,"nodeType":"176","messageId":"177","endLine":1,"endColumn":36},{"ruleId":"174","severity":1,"message":"211","line":1,"column":38,"nodeType":"176","messageId":"177","endLine":1,"endColumn":44},{"ruleId":"174","severity":1,"message":"212","line":3,"column":3,"nodeType":"176","messageId":"177","endLine":3,"endColumn":14},{"ruleId":"174","severity":1,"message":"186","line":7,"column":3,"nodeType":"176","messageId":"177","endLine":7,"endColumn":7},{"ruleId":"174","severity":1,"message":"213","line":47,"column":10,"nodeType":"176","messageId":"177","endLine":47,"endColumn":14},{"ruleId":"174","severity":1,"message":"212","line":3,"column":3,"nodeType":"176","messageId":"177","endLine":3,"endColumn":14},{"ruleId":"174","severity":1,"message":"183","line":5,"column":20,"nodeType":"176","messageId":"177","endLine":5,"endColumn":26},{"ruleId":"174","severity":1,"message":"184","line":6,"column":3,"nodeType":"176","messageId":"177","endLine":6,"endColumn":9},{"ruleId":"174","severity":1,"message":"185","line":7,"column":3,"nodeType":"176","messageId":"177","endLine":7,"endColumn":8},{"ruleId":"174","severity":1,"message":"186","line":8,"column":3,"nodeType":"176","messageId":"177","endLine":8,"endColumn":7},{"ruleId":"174","severity":1,"message":"181","line":12,"column":8,"nodeType":"176","messageId":"177","endLine":12,"endColumn":17},{"ruleId":"214","severity":1,"message":"215","line":36,"column":6,"nodeType":"216","endLine":36,"endColumn":8,"suggestions":"217"},{"ruleId":"218","severity":1,"message":"219","line":50,"column":26,"nodeType":"220","messageId":"221","endLine":50,"endColumn":28},{"ruleId":"214","severity":1,"message":"222","line":33,"column":5,"nodeType":"216","endLine":33,"endColumn":11,"suggestions":"223"},{"ruleId":"214","severity":1,"message":"222","line":64,"column":5,"nodeType":"216","endLine":64,"endColumn":11,"suggestions":"224"},{"ruleId":"214","severity":1,"message":"225","line":75,"column":6,"nodeType":"176","endLine":75,"endColumn":10},{"ruleId":"214","severity":1,"message":"226","line":75,"column":6,"nodeType":"176","endLine":75,"endColumn":10,"suggestions":"227"},{"ruleId":"214","severity":1,"message":"228","line":71,"column":6,"nodeType":"216","endLine":71,"endColumn":16,"suggestions":"229"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'FileUploadDemo' is defined but never used.","'FormLayoutDemo' is defined but never used.","'DataTable' is defined but never used.","'TempSave' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","no-native-reassign",["230"],"no-negated-in-lhs",["231"],["230"],["231"],"'ReactDOM' is defined but never used.","'Checkbox' is defined but never used.","'RadioButton' is defined but never used.","'Dropdown' is defined but never used.","'InputTextarea' is defined but never used.","'FileUpload' is defined but never used.","'classNames' is defined but never used.","'Rating' is defined but never used.","'InputNumber' is defined but never used.","'productService' is assigned a value but never used.","'months' is assigned a value but never used.","'processUploadedMeterData' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'editMeter' is assigned a value but never used.","'confirmDeleteSelected' is assigned a value but never used.","'useRef' is defined but never used.","'useLocation' is defined but never used.","'Home' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'meterIdParam'. Either include it or remove the dependency array.","ArrayExpression",["232"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook React.useCallback has a missing dependency: 'onNodeClick'. Either include it or remove the dependency array.",["233"],["234"],"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has a missing dependency: 'func'. Either include it or remove the dependency array. If 'func' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["235"],"React Hook useEffect has missing dependencies: 'onCancel' and 'onSubmit'. Either include them or remove the dependency array. If 'onSubmit' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["236"],"no-global-assign","no-unsafe-negation",{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"239","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},"Update the dependencies array to be: [meterIdParam]",{"range":"246","text":"247"},"Update the dependencies array to be: [node, onNodeClick]",{"range":"248","text":"249"},{"range":"250","text":"249"},"Update the dependencies array to be: [func]",{"range":"251","text":"252"},"Update the dependencies array to be: [inputRef, onCancel, onSubmit]",{"range":"253","text":"254"},[1025,1027],"[meterIdParam]",[1098,1104],"[node, onNodeClick]",[1706,1712],[1774,1778],"[func]",[1830,1840],"[inputRef, onCancel, onSubmit]"]